                                    			// Union Of Two Linked Lists (GFG) POTD (27-6-23) //
                                    			// Approach-1: Using Merge Sort Concept
                                    			// Approach-2: Using Set
                                    			// L1 = 9->6->4->2->3->8, L2 = 1->2->8->6->2 => 1 2 3 4 6 8 9
                                    			// L1 = 1->5->1->2->2->5, L2 = 4->5->6->7->1 => 1 2 4 5 6 7
                                    			// T.C = O((n+m)log(n+m)), S.C = O(n+m) //

#include <bits/stdc++.h>
using namespace std;

                                    // Approach-1: Using Merge Sort Concept, Just added else in if, else if, else in merge function
Node* getMid(Node* head)
{
    Node* slow=head;
    Node* fast=head->next;

    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }

    return slow;
}

Node* merge(Node* left, Node* right)
{
    if(left==NULL)
    {
        return right;
    }

    if(right==NULL)
    {
        return left;
    }

    Node* ans=new Node(-1);
    Node* temp=ans;

    while(left!=NULL && right!=NULL)
    {
        if(left->data < right->data)
        {
            temp->next=left;
            temp=left;
            left=left->next;
        }
        else if(left->data > right->data)
        {
            temp->next=right;
            temp=right;
            right=right->next;
        }
        else
        {
            temp->next=left;
            temp=left;
            left=left->next;
            right=right->next;
        }
    }

    while(left!=NULL)
    {
        temp->next=left;
        temp=left;
        left=left->next;
    }

    while(right!=NULL)
    {
        temp->next=right;
        temp=right;
        right=right->next;
    }

    ans=ans->next;
    return ans;
}

Node* sort(Node* head)
{
    // base case
    if(head==NULL || head->next==NULL)
    {
        return head;
    }

    // divide into 2 list
    Node* mid=getMid(head);

    Node* left=head;
    Node* right=mid->next;
    mid->next=NULL;

    // sort both
    left=sort(left);
    right=sort(right);

    // merge both sorted list
    Node* ans=merge(left, right);

    return ans;
}

struct Node* makeUnion(struct Node* head1, struct Node* head2)
{
    // code here
    Node* merged = merge(head1, head2);
    Node* sorted = sort(merged);
    return sorted;
}

                                                                        // Approach-2: Using Set
struct Node* makeUnion(struct Node* head1, struct Node* head2)
{
    set<int> s;
    
    Node *curr=head1;
    
    while(curr!=NULL)
    {
        s.insert(curr->data);
        curr=curr->next;
    }
    
    curr=head2;
    
    while(curr!=NULL)
    {
        s.insert(curr->data);
        curr=curr->next;
    }
    
    Node* temp=new Node(-1);
    Node* head3=temp;
    
    for(auto it:s)
    {
        head3->next=new Node(it);
        head3=head3->next;
    }
    
    return temp->next;
}
