			// Find Maximum Equal Sum Of Three Stacks (GFG) POTD (3-6-23) //
			// Find the possible equal maximum sum of the stacks with the removal of top elements allowed. First index of the array represents the top element of the stack //
			// S1={4,2,3}, S2={1,1,2,3}, S3={1,4} => 5 (pop 1 element from 1st stack and pop 2 elements from 2nd stack, then all have equal sum=>5) //
			// S1={4,7}, S2={10}, S3={1,2,3} => 0 (Not Possible) //
			// T.C = O(n1+n2+n3), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

int maxEqualSum(int N1,int N2,int N3,vector<int> &S1,vector<int> &S2,vector<int> &S3)
{
    int sum1=0, sum2=0, sum3=0;
    
    for(auto i:S1)
    {
        sum1+=i;
    }
    
    for(auto i:S2)
    {
        sum2+=i;
    }
    
    for(auto i:S3)
    {
        sum3+=i;
    }
    
    int i=0, j=0, k=0;
    
    while(i<N1 && j<N2 && k<N3)
    {
        if(sum1==sum2 && sum2==sum3)
        {
            return sum1;
        }
        else if(sum1>=sum2 && sum1>=sum3)
        {
            sum1-=S1[i++];
        }
        else if(sum2>=sum1 && sum2>=sum3)
        {
            sum2-=S2[j++];
        }
        else if(sum3>=sum1 &&  sum3>=sum2)
        {
            sum3-=S3[k++];
        }
    }
    
    return 0;
}