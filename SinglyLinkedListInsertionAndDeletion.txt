				// Singly Linked List Insertion And Deletion //

#include <bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    node *next;
    
    // constructor
    node(int data)
    {
        this->data=data;
        this->next=NULL;
    }
    
    
    // destructor
    ~node()
    {
        int value=this->data;
        // memory free
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
        cout<<"memory is free for node with data: "<<value<<endl;
    }
};

void insertAtHead(node* &head, int d)
{
    // new node create
    node *temp=new node(d);
    temp->next=head;
    head=temp;
}

void insertAtTail(node* &tail, int d)
{
    // new node create
    node *temp=new node(d);
    tail->next=temp;
    tail=temp;
}

void insertAtPosition(node* &tail, node* &head, int position, int d)
{
    // insert at start
    if(position==1)
    {
        insertAtHead(head,d);
        return;
    }
    
    node *temp=head;
    int count=1;
    
    while(count<position-1)
    {
        temp=temp->next;
        count++;
    }
    
    // insert at last position
    if(temp->next==NULL)
    {
        insertAtTail(tail,d);
        return;
    }
    
    // creating a node for d
    node* nodeToInsert=new node(d);
    nodeToInsert->next=temp->next;
    temp->next=nodeToInsert;
    
}

void deleteNode(int position, node* &head)
{
    // deleting first or start node
    if(position==1)
    {
        node* temp=head;
        head=head->next;
        // memory free start node
        temp->next=NULL;
        delete temp;
    }
    
    // deleting any middle node or last node
    else
    {
        node* curr=head;
        node* prev=NULL;
        
        int cnt=1;
        while(cnt<position)
        {
            prev=curr;
            curr=curr->next;
            cnt++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
    }
}

void print(node* &head)
{
    node *temp=head;
    
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

int main() 
{
    // created a new node
    node *node1=new node(10);
    
    //cout<<node1->data<<endl;
    //cout<<node1->next<<endl;
    
    // head pointed to node1
    node *head=node1;
    node *tail=node1;
    
    print(head);
    
    //insertAtHead(head,12);
    //print(head);
    
    insertAtTail(tail,12);
    print(head);
    
    insertAtTail(tail,15);
    print(head);
    
    insertAtPosition(tail,head,4,22);
    print(head);
    
    cout<<"Head: "<<head->data<<endl;
    cout<<"Tail: "<<tail->data<<endl;
    
    deleteNode(4,head);
    print(head);
    
    cout<<"Head: "<<head->data<<endl;
    cout<<"Tail: "<<tail->data<<endl;
}