			// Replace O's with X's (GFG), (Codestudio) //
			// Surrounded Regions (Leetcode-130) //
			// Replace all 'O' with 'X' that are surrounded by 'X' //
			// DFS Graph Striver //
			// A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it //
/*
mat =  {'X', 'X', 'X', 'X'},        {'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'},        {'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, =>     {'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'},        {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}         {'X', 'X', 'O', 'O'}
*/
			// Boundary wale sare 'O' traverse karo visited karo //
			// Jo andar wale bache hue 'O' honge vo sab answer //
			// T.C = O(n*m), S.C = O(n*m) //

#include <bits/stdc++.h>
using namespace std;

private:
void dfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &mat, int n, int m)
{
    vis[row][col]=1;
    
    int delrow[]={-1, 0, +1, 0};
    int delcol[]={0, +1, 0, -1};
    
    // check for 4 directions
    for(int i=0;i<4;i++)
    {
        int nrow=row+delrow[i];
        int ncol=col+delcol[i];
        
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && mat[nrow][ncol]=='O')
        {
            dfs(nrow, ncol, vis, mat, n, m);
        }        
    }
}   

public:
vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
{
    // code here
    // DFS
    vector<vector<int>> vis(n, vector<int>(m, 0));
    
    // traverse 'O' in firs & last row
    for(int j=0;j<m;j++)
    {
        // first row
        if(!vis[0][j] && mat[0][j]=='O')
        {
            dfs(0, j, vis, mat, n, m);
        }
        
        // last row
        if(!vis[n-1][j] && mat[n-1][j]=='O')
        {
            dfs(n-1, j, vis, mat, n, m);
        }
    }
    
    // traverse 'O' in first & last col
    for(int i=0;i<n;i++)
    {
        // first col
        if(!vis[i][0] && mat[i][0]=='O')
        {
            dfs(i, 0, vis, mat, n, m);
        }
        
        // last col
        if(!vis[i][m-1] && mat[i][m-1]=='O')
        {
            dfs(i, m-1, vis, mat, n, m);
        }
    }
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(!vis[i][j] && mat[i][j]=='O')
            {
                mat[i][j]='X';
            }
        }
    }
    
    return mat;
}
