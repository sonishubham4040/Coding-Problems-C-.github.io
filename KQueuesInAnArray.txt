				// 'K' Queues In An Array (Codestudio) //

#include <bits/stdc++.h> 
using namespace std;

class kQueue
{
    public:
    
    int n;
    int k;
    int *arr;
    int *front;
    int *rear;
    int freespot;
    int *next;
    
    // Constructor
    kQueue(int n, int k)
    {
        this->n=n;
        this->k=k;  
        
        front=new int[k];
        rear=new int[k];
        
        // memset(front,-1,k); // set all elements -1 STL
        // memset(rear,-1,k); // set all elements -1 STL
        // Or
        for(int i=0;i<k;i++)
        {
            front[i]=-1;
            rear[i]=-1;
        }
        
        next=new int[n];
        for(int i=0;i<n;i++)
        {
            next[i]=i+1;
        }
        next[n-1]=-1;
        arr=new int[n];
        freespot=0;
    }
    
    // Push
    void enqueue(int data, int qn)
    {
        // Overflow
        if(freespot==-1)
        {
            cout<<"Overflow, no space !"<<endl;
            return;
        }
        
        // find first free index
        int index=freespot;
        
        // update freespot
        freespot=next[index];
        
        // check whether first elemment
        if(front[qn-1]==-1)
        {
            front[qn-1]=index;
        }
        else
        {
            // link new element to new element
            next[rear[qn-1]]=index;
        }
        
        // update next
        next[index]=-1;
        
        // update rear
        rear[qn-1]=index;
        
        // push element
        arr[index]=data;
    }
    
    // Pop
    int dequeue(int qn)
    {
        // underflow
        if(front[qn-1]==-1)
        {
            cout<<"Underflow, its empty !"<<endl;
            return -1;
        }
        
        // find index to pop
        int index=front[qn-1];
        
        // front ko aage badhao
        front[qn-1]=next[index];
        
        // freeslot ko manage karo
        next[index]=freespot;
        freespot=index;
        return arr[index];
    }
};

int main()
{
    kQueue q(10,3);
    
    q.enqueue(10,1);
    q.enqueue(15,1);
    q.enqueue(20,2);
    q.enqueue(25,1);
    
    cout<<"Pop/dequeue from queue 1: "<<q.dequeue(1)<<endl;
    cout<<"Pop/dequeue from queue 2: "<<q.dequeue(2)<<endl;
    cout<<"Pop/dequeue from queue 1: "<<q.dequeue(1)<<endl;
    cout<<"Pop/dequeue from queue 1: "<<q.dequeue(1)<<endl;
    cout<<"Pop/dequeue from queue 1: "<<q.dequeue(1)<<endl;
}