			// Remove Duplicate Letters (Leetcode-316) // 
			// Smallest Subsequence of Distinct Characters (Leetcode-1081) //
			// Input: s = "bcabc", Output: "abc" //
			// Input: s = "cbacdcbc", Output: "acdb" //
			// Using Stack and Map //

#include <bits/stdc++.h>
using namespace std;

string removeDuplicateLetters(string s) 
{
    map<char,int> mp;
    stack<int> st;
    vector<bool> visited(26,false);

    for(int i=0;i<s.length();i++)
    {
        mp[s[i]]++;
    }

    for(int i=0;i<s.length();i++)
    {
        mp[s[i]]--;

        if(visited[s[i]-'a']==false)
        {
            while(!st.empty() && st.top()>s[i] && mp[st.top()]>0)
            {
                visited[st.top()-'a']=false;
                st.pop();
            }
            st.push(s[i]);
            visited[s[i]-'a']=true;
        }
    }
    string ans="";
    while(!st.empty())
    {
        ans+=st.top();
        st.pop();
    }
    reverse(ans.begin(),ans.end());
    return ans;
}

int main()
{
    string s="bcabc";
    
    cout<<"Remove Duplicate Letters: "<<removeDuplicateLetters(s);
}