                                              // BFS of Graph (GFG) Striver //
                                              // BFS in Graph (Codestudio) //
                                              // Using queue, visited array //
                                              // T.C = O(V+2E), S.C = O(V), V=nodes, E=edges //

#include <bits/stdc++.h>
using namespace std;

// GFG
vector<int> bfsOfGraph(int V, vector<int> adj[])
{
    vector<int> bfs;
    
    int vis[V]={0};
    vis[0]=1;
    
    queue<int> q;
    q.push(0);
    
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        
        bfs.push_back(node);
        
        for(auto i:adj[node])
        {
            if(!vis[i])
            {
                vis[i]=1;
                q.push(i);
            }
        }
    }
    
    return bfs;
}

// Codestudio
void adjList(unordered_map<int, set<int>> &adj, vector<pair<int, int>> &edges)
{
    for(auto i:edges)
    {
        adj[i.first].insert(i.second);
        adj[i.second].insert(i.first);
    }
}

void bfsTraversal(unordered_map<int, set<int>> &adj, int vis[], vector<int> &ans, int node)
{
    queue<int> q;
    q.push(node);

    vis[node]=1;
    
    while(!q.empty())
    {
        int fNode=q.front();
        q.pop();
        
        ans.push_back(fNode);

        for(auto i:adj[fNode])
        {
            if(!vis[i])
            {
                vis[i]=1;
                q.push(i);
            }
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    unordered_map<int, set<int>> adj;
    adjList(adj, edges);

    int vis[vertex]={0};
    
    vector<int> ans;

    for(int i=0;i<vertex;i++)
    {
        if(!vis[i])
        {
            bfsTraversal(adj, vis, ans, i);
        }
    }

    return ans;
}
