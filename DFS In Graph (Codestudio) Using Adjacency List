                                                			// DFS In Graph (Codestudio) //
                                                			// Creating adjacency list and then dfs //
                                                			// T.C = O(n) + O(2E), S.C = O(2E) //
                                                
  #include <bits/stdc++.h>
using namespace std;

// dfs code
void dfs(int node, vector<int> &ans, int vis[], vector<int> adj[])
{
    vis[node]=1;
    ans.push_back(node);

    for(auto i: adj[node])
    {
        if(!vis[i])
        {
            dfs(i, ans, vis, adj);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<vector<int>> ans;
    vector<int> adj[V+1];
    int vis[V]={0};
    
    // Adjacency list banai
    for(int i=0;i<E;i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    // Answer me dala
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            vector<int> temp;
            dfs(i, temp, vis, adj);
            ans.push_back(temp);
        }
    }

    return ans;
}
