                                                  			// Maximum Product Difference Between Two Pairs (Leetcode-1913) POTD //
                                                  			// (a*b)-(c*d) //
                                                  			// difference should be max.
                                                  			// 2 Approaches
                                                  			// Using Sort (nlogn)
                                                  			// Using large, small (n)

// Approach-1
int maxProductDifference(vector<int>& nums) 
{
    int largest=0;
    int secondLargest=0;
    int smallest=1e9;
    int secondSmallest=1e9;

    for(auto i: nums)
    {
        if(i<smallest)
        {
            secondSmallest=smallest;
            smallest=i;
        }
        else if(i<secondSmallest)
        {
            secondSmallest=i;
        }

        if(i>largest)
        {
            secondLargest=largest;
            largest=i;
        }
        else if(i>secondLargest)
        {
            secondLargest=i;
        }
    }

    int ans=(largest*secondLargest)-(smallest*secondSmallest);

    return ans;
}

// Approach-2
int maxProductDifference(vector<int>& nums) 
{
    sort(nums.begin(), nums.end());
    int n=nums.size();

    int ans=abs((nums[0]*nums[1]) - (nums[n-1]*nums[n-2]));

    return ans;
}
