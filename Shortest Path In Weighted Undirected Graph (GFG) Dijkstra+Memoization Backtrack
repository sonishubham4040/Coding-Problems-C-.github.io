                                              			// Shortest Path In Weighted Undirected Graph (GFG) //
                                              			// Dijkstra + Memoization Backtrack Graph Striver //
                                              			// distance array bhi banao, parent array bhi banao jisme node kaha se ayi vo store hoga //
                                              			// T.C = O(ElogV), S.C = O(V) //

#include <bits/stdc++.h>
using namespace std;

vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) 
{
    // Code here
    // Dijkstra algo + Memoization Bactrack
    
    // create adjacency list
    vector<pair<int,int>> adj[n+1];
    
    for(auto i: edges)
    {
        int u=i[0];
        int v=i[1];
        int wt=i[2];
        
        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }
    
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    
    vector<int> dist(n+1, 1e9);
    vector<int> parent(n+1);
    
    for(int i=1;i<=n;i++)
    {
        parent[i]=i;
    }
    
    dist[1]=0;
    // distance, node
    pq.push({0, 1});
    
    while(!pq.empty())
    {
        int distance=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        
        for(auto i: adj[node])
        {
            int adjNode=i.first;
            int weight=i.second;
            
            if(distance+weight < dist[adjNode])
            {
                dist[adjNode]=distance+weight;
                pq.push({dist[adjNode], adjNode});
                parent[adjNode]=node;
            }
        }
    }
    
    if(dist[n]==1e9)
    {
        return {-1};
    }
    
    vector<int> path;
    int node=n;
    
    while(parent[node]!=node)
    {
        path.push_back(node);
        node=parent[node];
    }
    
    // pushing 1st element manually
    path.push_back(1);
    
    reverse(path.begin(), path.end());
    
    return path;
}
