			// Letter Combinations of a Phone Number (Leetcode-17) //
			// 2=abc, 3=def, 4=ghi ........9=wxyz //
			// {"23"} = {"ad","ae","af","bd","be","bf","cd","ce","cf"} //

#include <bits/stdc++.h>
using namespace std;

void solve(string digits, string output, int index, vector<string>  &ans, string mapping[])
{
    // base case
    if(index>=digits.size())
    {
        ans.push_back(output);
        return ;
    }
    
    int element=digits[index]-'0';
    string value=mapping[element];
    
    for(int i=0;i<value.length();i++)
    {
        output.push_back(value[i]);
        solve(digits,output,index+1,ans,mapping);
        output.pop_back();
    }
    
}

vector<string> letterCombinations(string digits)
{
    vector<string> ans;
    if(digits.length()==0)
    return ans;
    
    string output="";
    int index=0;
    
    string mapping[10]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    
    solve(digits,output,index,ans,mapping);
    return ans;
}

int main() 
{
    string digits="23";
    cout<<"Keypad Phone: ";
    letterCombinations(digits);
    
}