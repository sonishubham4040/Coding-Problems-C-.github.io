                                        			// Connecting The Graph (GFG) //
                                        			// Number of operations to make Graph connected (Codestudio) // 
                                        			// Using Disjoin Set Union By Size //
                                        			// Remove one edge and connect it to  other node so that overall graph is connected //
                                        			// Return minimum edges req. //
                                        			// T.C = O(n*4alpha), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

// Using Disjoint Set, Union by rank, size
class DisjointSet
{
    public:
    vector<int> parent;
    vector<int> size;
    vector<int> rank;
    
    DisjointSet(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1, 0);
        size.resize(n+1);
        
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findUParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        return parent[node]=findUParent(parent[node]);
    }
    
    void unionByRank(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(rank[ulp_u]<rank[ulp_v])
        {
            parent[ulp_u]=ulp_v;
        }
        else if(rank[ulp_u]<rank[ulp_v])
        {
            parent[ulp_v]=ulp_u;
        }
        else
        {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(size[ulp_u]<size[ulp_v])
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else
        {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};

class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        // code here
        // Disjoint set
        
        DisjointSet ds(n);
        
        // count extra edges
        int cntExtra=0;
        
        for(auto i: edge)
        {
            int u=i[0];
            int v=i[1];
            
            if(ds.findUParent(u)==ds.findUParent(v))
            {
                cntExtra++;
            }
            else
            {
                ds.unionBySize(u, v);
            }
        }
        
        // count no. of components
        int cntComp=0;
        
        for(int i=0;i<n;i++)
        {
            if(ds.parent[i]==i)
            {
                cntComp++;
            }
        }
        
        int ans=cntComp-1;
        
        if(cntExtra>=ans)
        {
            return ans;
        }
        
        return -1;
    }
};
