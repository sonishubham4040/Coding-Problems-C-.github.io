		// Sum Tree (GFG) //
		// Given a Binary Tree. Return true if, for every node X in the tree other than the leaves, its value is equal to the sum of its left subtree's value and its right subtree's value. Else return false //
		// An empty tree is also a Sum Tree as the sum of an empty tree can be considered to be 0. A leaf node is also considered a Sum Tree //

#include <bits/stdc++.h>
using namespace std;

pair<bool,int> sumFast(Node* root)
{
    // base case
    if(root==NULL)
    {
        pair<bool,int> p=make_pair(true, 0);
        return p;
    }
        
    if(root->left==NULL && root->right==NULL)
    {
        pair<bool,int> p=make_pair(true, root->data);
        return p;
    }
        
    pair<bool,int> leftAns=sumFast(root->left);
    pair<bool,int> rightAns=sumFast(root->right);
        
    bool left=leftAns.first;
    bool right=rightAns.first;
        
    bool check=root->data == (leftAns.second + rightAns.second);
        
    pair<bool,int> ans;
        
    if(left && right && check)
    {
        ans.first=true;
        ans.second=2*root->data;
    }
    else
    {
        ans.first=false;
    }
        
    return ans;
}
    
bool isSumTree(Node* root)
{
    // Your code here
    return sumFast(root).first;
}