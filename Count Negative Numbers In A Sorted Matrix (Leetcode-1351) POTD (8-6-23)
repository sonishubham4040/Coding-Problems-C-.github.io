                                                // Count Negative Numbers In A Sorted Matrix (Leetcode-1351) POTD (8-6-23) //
                                                // Grid is sorted in decreasing order both in row and col //
                                                // grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] => 8 (total 8 negative elements)  //
                                                // grid = [[3,2],[1,0]] => 0 (none) //
                                                // 4 Approaches: //
                                                // 1) Using Linear Search, T.C = O(n*m), S.C = O(1)
                                                // 2) Using Binary Search, T.C = O(nlogm), S.C = O(1)
                                                // 3) Using Linear Traversal, T.C = O(n+m), S.C = O(1)
                                                // 4) Using if else for one row, T.C = O(n+m), S.C = O(1)

#include <bits/stdc++.h>
using namespace std;

// Approach-1: Using Linear Search
int countNegatives(vector<vector<int>>& grid)
{
    int cnt=0;

    for(int i=0;i<grid.size();i++)
    {
        for(int j=0;j<grid[0].size();j++)
        {
            if(grid[i][j]<0)
            {
                cnt++;
            }
        }
    }

    return cnt;
}

// Approach-2: Using Binary Search
int countNegatives(vector<vector<int>>& grid) 
{
    int cnt=0;
    int n=grid[0].size();

    for(auto row:grid)
    {
        int start=0;
        int end=n-1;

        while(start<=end)
        {
            int mid=start+(end-start)/2;

            if(row[mid]<0)
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        // start points to first position of negative element
        // so total negative = n-start
        cnt+=(n-start);
    }

    return cnt;
}

// Approach-3: Using Linear Traversal (if one row's element found negative then all elements below it means in below all columns all are negative since it's sorted in dec.)
int countNegatives(vector<vector<int>>& grid) 
{
    int cnt=0;
    int n=grid[0].size();
    int end=n-1;

    for(auto row:grid)
    {
        // dec. end to point it to the last positive element
        while(end>=0  && row[end]<0)
        {
            end--;
        }
        // end points to last positive element
        // so n-(end+1) is total negative elements
        cnt+=(n-(end+1));
    }

    return cnt;
}

// Approach-4: Using if else for one row
int countNegatives(vector<vector<int>>& grid) 
{
    int n=grid.size();
    int m=grid[0].size();

    int i=0;
    int j=m-1;
    int cnt=0;

    while(i<n && j>=0)
    {
        if(grid[i][j]<0)
        {
            cnt+=(n-i);
            j--;
        }
        else
        {
            i++;
        }
    }

    return cnt;
}
