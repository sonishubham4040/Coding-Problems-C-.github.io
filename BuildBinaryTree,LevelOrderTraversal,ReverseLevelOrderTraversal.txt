		// Build Binary Tree, Level Order Traversal, Reverse Level Order Traversal //
		// Level Order Traversal :- //
		// i/p: 1 2 4 -1 -1 5 -1 -1 3 -1 -1
		// o/p: 1 2 3 4 5 //
		// Reverse Level Order Traversal :- 
		// i/p: 1 2 4 -1 -1 5 -1 -1 3 -1 -1
		// o/p: 4 5 2 3 1 //
		// T.C = O(n), S.C = O(n) //
    
#include<bits/stdc++.h>
using namespace std;

class node
{
    public:
    
    int data;
    node* left;
    node* right;
    
    node(int d)
    {
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};

node* buildTree(node* root)
{
    cout<<"Enter the data: "<<endl;
    int data;
    cin>>data;
    
    root=new node(data);
    
    if(data==-1)
    {
        return NULL;
    }
    
    cout<<"Enter data for inserting in left of: "<<data<<endl;
    root->left=buildTree(root->left);
    cout<<"Enter data for inserting in right of: "<<data<<endl;
    root->right=buildTree(root->right);
    
    return root;
}

void levelOrderTraversal(node* root)
{
    queue<node*> q;
    q.push(root);
    
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
     
        cout<<temp->data<<" ";
            
        if(temp->left)
        {
            q.push(temp->left);
        }
        if(temp->right)
        {
            q.push(temp->right);
        }
    }
}

void reverseLevelOrderTraversal(node* root)
{
    queue<node*> q;
    stack<node*> s;
    q.push(root);
    
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        s.push(temp);
        
        if(temp->right)
        {
            q.push(temp->right);
        }
        if(temp->left)
        {
            q.push(temp->left);
        }
    }
    
    while(!s.empty())
    {
        node* temp=s.top();
        cout<<temp->data<<" ";
        s.pop();
    }
}

int main()
{
    node* root=NULL;
    
    // Creating a tree
    root=buildTree(root);

    // 1 2 4 -1 -1 5 -1 -1 3 -1 -1
    // 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    // level order
    cout<<"Printing the level order traversal:"<<endl;
    levelOrderTraversal(root);
    cout<<endl;
    
    cout<<"Printing the Reverse level order traversal:"<<endl;
    reverseLevelOrderTraversal(root);
}