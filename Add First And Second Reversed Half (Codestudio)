                                                    // Add First And Second Reversed Half (Codestudio) //
                                                    // LL: 1-2-3-4-5-5-6 => firstHalf = 1-2-3-4, reversed secondHalf = 6-5-5 // 
                                                    // Output Sum => 1-8-8-9 (1234+655=1889) //
                                                    // T.C = O(n), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

Node* reverse(Node* head)
{
    if(head==NULL)
    {
        return NULL;
    }

    Node* curr=head;
    Node* prev=NULL;
    Node* forward=NULL;

    while(curr!=NULL)
    {
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }

    return prev;
}

Node* addTwoLL(Node* head1, Node*head2)
{
    head1=reverse(head1);
    head2=reverse(head2);

    Node* ans=new Node(-1);
    Node* ansHead=ans;
    
    int carry=0;
    
    while(head1!=NULL || head2!=NULL)
    {
        int val1=head1 ? head1->data : 0;
        int val2=head2 ? head2->data : 0;
        
        int sum=val1+val2+carry;

        carry=sum>=10 ? 1 : 0;
        sum=sum%10;

        ans->next=new Node(sum);
        ans=ans->next;

        if(head1!=NULL)
        {
            head1=head1->next;
        }

        if(head2!=NULL)
        {
            head2=head2->next;
        } 
    }
    
    if(carry>0)
    {
        ans->next=new Node(carry);
    }

    ansHead=ansHead->next;

    return reverse(ansHead);
}

Node* addFirstAndReversedSecondHalf(Node* head)
{
    //  Write your code here.
    if(head==NULL || head->next==NULL)
    {
        return head;
    }

    Node* slow=head;
    Node* fast=head->next;
    Node* head1=slow;

    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }

    Node* head2=reverse(slow->next);
    slow->next=NULL;

    Node* ansHead=addTwoLL(head1, head2);

    while(ansHead->data==0 && ansHead->next!=NULL)
    {
        ansHead=ansHead->next;
    }

    return ansHead;
}
