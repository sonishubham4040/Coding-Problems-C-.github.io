                		// Remove Loop In LL //

#include <bits/stdc++.h>
using namespace std;

// detect loop
node* floydDetectLoop(node* head)
{
    if(head==NULL)
        return NULL;
    
    node* slow=head;
    node* fast=head;
    
    while(slow!=NULL && fast!=NULL)
    {
        fast=fast->next;
        if(fast!=NULL)
        {
            fast=fast->next;
        }
        
        slow=slow->next;
        
        if(slow==fast)
        {
            cout<<"Present At: "<<slow->data<<endl;
            return slow;
        }
    }
    return NULL;
}

// start node
node* getStartingNode(node* head)
{
    if(head==NULL)
        return NULL;
    
    node* intersection=floydDetectLoop(head);
    node* slow=head;
    
    while(slow!=intersection)
    {
        slow=slow->next;
        intersection=intersection->next;
    }
    
    return slow;
}

				// Remove Loop

void removeLoop(node* head)
{
    if(head==NULL)
        return ;
    
    node* startOfLoop=getStartingNode(head);
    node* temp=startOfLoop;
    
    while(temp->next!=startOfLoop)
    {
        temp=temp->next;
    }
    
    temp->next=NULL;
}