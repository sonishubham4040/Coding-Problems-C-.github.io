            // OOPs Concept Part - 1 //

#include <bits/stdc++.h>
using namespace std;

class hero
{
    // by default private
    private:
    int health;
    
    public:
    char *name;
    char level;
    // static member
    static int timeToComplete;
    
    // default constructor
    hero()
    {
        cout<<"constructor called when object is created"<<endl; 
        name=new char[100];
    }
    
    // parameterized constructor
    hero(int health)
    {
        cout<<"this-> "<<this<<endl;
        this->health=health;    
    }
    
    hero(int health, char level)
    {
        this->level=level;
        this->health=health;
    }
    
    // copy constructor by pass by reference
    hero(hero &temp)
    {
        // deep copy , new array 
        char *ch=new char[strlen(temp.name)+1];
        strcpy(ch,temp.name);
        this->name=ch;
        
        cout<<"copy constructor called "<<endl;
        this->health=temp.health;
        this->level=temp.level;
        
    } 
    
    void print()
    {
        cout<<"[ "<<"Name: "<<this->name;
        cout<<", health: "<<this->health;
        cout<<", level: "<<this->level<<" ]"<<endl;
    }
    
    // getter, setter
    int getHealth()
    {
        return health;
    }
    
    char getLevel()
    {
        return level;
    }
    
    void setHealth(int h)
    {
        health=h;
    }
    
    void setLevel(char ch)
    {
        level=ch;
    }
    
    void setName(char name[])
    {
        strcpy(this->name, name);
    } 
    
    // static function
    static int random()
    {
        // no this keyword in static 
        // cout<<this->health=health<<endl;
        // cant access other data member except static member
        return timeToComplete;
    }
    
    // Destructor
    ~hero()
    {
        cout<<"destructor bhai called"<<endl;
    }
};

// static keyword initialisation
int hero::timeToComplete=5;

int main() 
{
    // print without creating object
    // cout<<"Time: "<<hero::timeToComplete<<endl;
    
    cout<<"static function call: "<<hero::random()<<endl;
    
   /* // static
    hero u;
    
    // dynamically
    hero *v=new hero();
    // delete manually for dynamic
    delete v;*/
    
    
    /*hero hero1;
    
    hero1.setLevel('F');
    hero1.setHealth(30);
    char name[8]="shubham";
    hero1.setName(name);
    
    hero1.print();
    
    // use default copy constructor
    hero hero2(hero1);
    // Or hero hero2=hero1
    hero2.print();
    
    hero1.name[0]='T';
    hero1.print();
    // shallow copy in default copy constructor
    hero2.print();
    
    // copy assignment operator
    hero1=hero2;
    hero1.print();
    hero2.print();
    
    
    // hero t; default 
    // error, as there is no default constructor now
    // hero t;
    
    hero c(10);
    cout<<"address of c: "<<&c<<endl;
    c.getHealth();
    
    // parameterized
    hero temp(50,'Y');
    
    // dynamic object
    hero *r=new hero();
    
    // copy constructor
    hero s(99,'R');
    s.print();
    /// copy
    hero g(s);
    g.print();
    
    // static allocation
    hero a;
    a.setHealth(10);
    a.setLevel('D');
    cout<<"level of a is: "<<a.level<<endl;
    cout<<"health of a is: "<<a.getHealth()<<endl;
    
    // dynamically
    hero *b=new hero;
    b->setHealth(20);
    b->setLevel('B');
    cout<<"level of b is: "<<(*b).level<<endl;
    cout<<"health of b is: "<<(*b).getHealth()<<endl;
    
    // another method of dynamic
    cout<<"level of b is: "<<b->level<<endl;
    cout<<"health of b is: "<<b->getHealth()<<endl;
    
    hero h;
    // size is 8 instead of 5 due to padding and allignment
    cout<<"size of hero: "<<sizeof(h)<<endl;
    
    // garbage values
    cout<<"value of health: "<<h.getHealth()<<endl;
    cout<<"value of level: "<<h.level<<endl;

    // initialize with values
    h.setHealth(80);
    h.setLevel('A');
    
    cout<<"value of health after: "<<h.getHealth()<<endl;
    cout<<"value of level after: "<<h.level<<endl;
    
    // can't access private members outside class
    // cout<<"Name: "<<h.name<<endl;
    
  
    */
    
    
}