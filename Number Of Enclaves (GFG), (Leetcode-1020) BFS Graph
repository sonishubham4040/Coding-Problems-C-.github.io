                                        			// Number Of Enclaves (GFG), (Leetcode-1020) //
                                        			// BFS Graph Striver //
                                        			// 1-land, 0-sea, Can move on land in 4 directions and move off the boundary //
                                        			// Return the number of lands which can't move off boundary (Andar wale 1's) //
                                        /*
                                        {0, 0, 0, 0},               0 0  0   0
                                        {1, 0, 1, 0},       =>      1 0  1.  0    
                                        {0, 1, 1, 0},               0 1. 1.  0
                                        {0, 0, 0, 0}                0 0  0   0
                                                        output => 3 (1. inside lands)
                                        */
                                        			// T.C = O(n*m), S.C = O(n*m) //

#include <bits/stdc++.h>
using namespace std;

int numberOfEnclaves(vector<vector<int>> &grid)
{
    // Code here
    // BFS
    int n=grid.size();
    int m=grid[0].size();
    
    int vis[n][m]={0};
    
    // row, col
    queue<pair<int,int>> q;
    
    // Boundary wale row, col ke 1 ko queue me daldo visit kardo
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            // first & last -> row & col
            if(i==0 || j==0 || i==n-1 || j==m-1)
            {
                if(grid[i][j]==1)
                {
                    q.push({i, j});
                    vis[i][j]=1;       
                }
            }
        }
    }
    
    int delrow[]={-1, 0, +1, 0};
    int delcol[]={0, +1, 0, -1};
    
    while(!q.empty())
    {
        int row=q.front().first;
        int col=q.front().second;
        q.pop();
        
        // traverse in 4 directions
        for(int i=0;i<4;i++)
        {
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                && !vis[nrow][ncol] && grid[nrow][ncol]==1)
            {
                q.push({nrow, ncol});
                vis[nrow][ncol]=1;
            }    
        }
    }
    
    int cnt=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(!vis[i][j] && grid[i][j]==1)
            {
                cnt++;
            }
        }
    }
    
    return cnt;
}
