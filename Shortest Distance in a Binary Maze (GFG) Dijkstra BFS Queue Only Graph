                                                			// Shortest Distance in a Binary Maze (GFG) //
                                                			// Dijkstra BFS Queue Only //
                                                			// source to destination in min. steps in grid //
                                                			// 4 Directional accros 1's //
                                                			// T.C = O(n*m), S.C = O(n*m) //

#include <bits/stdc++.h>
using namespace std;  

int shortestPath(vector<vector<int>> &grid, pair<int, int> source, pair<int, int> destination) 
{
    // code here
    // Dijkstra with Queue only
    
    if(source.first==destination.first && source.second==destination.second)
    {
        return 0; 
    }
    
    int n=grid.size();
    int m=grid[0].size();
    
    // distance, node indexes
    queue<pair<int, pair<int,int>>> q;
    
    vector<vector<int>> dist(n, vector<int>(m, 1e9));
    dist[source.first][source.second]=0;
    
    q.push({0, {source.first, source.second}});
    
    int delrow[]={-1, 0, +1, 0};
    int delcol[]={0, +1, 0, -1};
    
    while(!q.empty())
    {
        int distance=q.front().first;
        int r=q.front().second.first;
        int c=q.front().second.second;
        q.pop();
        
        for(int i=0;i<4;i++)
        {
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                && grid[nrow][ncol]==1 && distance+1 < dist[nrow][ncol])
            {
                dist[nrow][ncol]=distance+1;
                
                if(nrow==destination.first && ncol==destination.second)
                {
                    return distance+1;    
                }
                
                q.push({distance+1, {nrow, ncol}});
            }    
        }
    }

    return -1;
} //
			// Dijkstra BFS Queue Only //
			// source to destination in min. steps in grid //
			// 4 Directional accros 1's //
			// T.C = O(n*m), S.C = O(n*m) //

#include <bits/stdc++.h>
using namespace std;

int shortestPath(vector<vector<int>> &grid, pair<int, int> source, pair<int, int> destination) 
{
    // code here
    // Dijkstra with Queue only
    
    if(source.first==destination.first && source.second==destination.second)
    {
        return 0; 
    }
    
    int n=grid.size();
    int m=grid[0].size();
    
    // distance, node indexes
    queue<pair<int, pair<int,int>>> q;
    
    vector<vector<int>> dist(n, vector<int>(m, 1e9));
    dist[source.first][source.second]=0;
    
    q.push({0, {source.first, source.second}});
    
    int delrow[]={-1, 0, +1, 0};
    int delcol[]={0, +1, 0, -1};
    
    while(!q.empty())
    {
        int distance=q.front().first;
        int r=q.front().second.first;
        int c=q.front().second.second;
        q.pop();
        
        for(int i=0;i<4;i++)
        {
            int nrow=r+delrow[i];
            int ncol=c+delcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                && grid[nrow][ncol]==1 && distance+1 < dist[nrow][ncol])
            {
                dist[nrow][ncol]=distance+1;
                
                if(nrow==destination.first && ncol==destination.second)
                {
                    return distance+1;    
                }
                
                q.push({distance+1, {nrow, ncol}});
            }    
        }
    }

    return -1;
}
