                              			// Generate All Parenthesis (Codestudio), (GFG), (Leetcode-22) //
                              			// Recursion + Backtrtack //
                              /* n=3 =>
                              ((()))
                              (()())
                              (())()
                              ()(())
                              ()()() 
                              */
                              /* n=2 =>
                              ()()
                              (())
                              */
                              			// T.C = O(2^n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

void solve(int open, int close, string ans)
{
    // base case
    if(open==0 && close==0)
    {
        cout<<ans<<endl;
        return;
    }

    if(open>0)
    {
        ans.push_back('(');
        solve(open-1, close, ans);
        ans.pop_back();
    }

    if(close>open)
    {
        ans.push_back(')');
        solve(open, close-1, ans);
        ans.pop_back();
    }
}

void printWellFormedParanthesis(int n)
{
    // Write your code here
    int open=n;
    int close=n;
    string ans="";

    solve(open, close, ans);
}
