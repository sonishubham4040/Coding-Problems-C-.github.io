                                                // Least Prime Factor (GFG) POTD (7-6-23) //
                                                // Using Sieve Of Eratosthenes //
                                                // N=6 => Output: [0,1,2,3,2,5,2] //
                                         // As, (least prime factor of 1 = 1,
                                              // least prime factor of 2 = 2,
                                              // least prime factor of 3 = 3,
                                              // least prime factor of 4 = 2,
                                              // least prime factor of 5 = 5,
                                              // least prime factor of 6 = 2)  //
                                                // T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

vector<int> leastPrimeFactor(int n)
{
    vector<int> ans(n+1);
    ans[1]=1;
    
    // mark all as prime
    for(int i=2;i<=n;i++)
    {
        ans[i]=i;       
    }
    
    // sieve of eratos
    for(int i=2;i<=n;i++)
    {
        // If ans[i] is prime (i.e., its value is still i)
        if(ans[i]==i)
        {
            // Mark all multiples of i with i as their least prime factor
            for(int j=2*i;j<=n;j+=i)
            {
                if(ans[j]==j)
                {
                    ans[j]=i;
                }
            }
        }
    }
    
    return ans;
}
