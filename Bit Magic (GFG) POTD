                                        // Bit Magic (GFG) POTD (13-5-23) //
                                        // arr[i]==arr[n-1] for every index //
                                        // if not equal then arr[i] ^ arr[j] and increase count //
                                        // return min. count //
                                        // arr={1,0,0,0} => 1 (1 0 0 1) //
                                        // arr={1,0,1} => 0 operations //
                                        // arr={1,0,1,0,1,0} => 2 (0 0 1 1 0 0) 1 or 1 ka XOR kardenge // 
                                        // T.C = O(n), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

int bitMagic(int n, vector<int> &arr) 
{
    // code here
    int ans=0;
    int i=0;
    int j=n-1;
    
    while(i<j)
    {
        if(arr[i]!=arr[j])
        {
            ans++;
        }
        
        i++;
        j--;
    }
    
    if(ans%2==0)
    {
        return ans/2;
    }
    else
    {
        return ans/2 + 1;
    }
}
