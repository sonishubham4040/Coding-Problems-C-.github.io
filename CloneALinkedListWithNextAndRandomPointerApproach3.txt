		// Clone A Linked List With Next And Random Pointer (GFG )//
		// Approach 3 By Changing Pointers / Links //
		// T.C = O(n) , S.C = O(1) //

void insertAtTail(Node* &head, Node* &tail, int d)
{
    Node* newNode=new Node(d);
    if(head==NULL)
    {
        head=newNode;
        tail=newNode;
        return;
    }
    else
    {
        tail->next=newNode;
        tail=newNode;
    }
}
    
Node *copyList(Node *head)
{
    //Write your code here
        
    // step 1 Create a Clone List
    Node* cloneHead=NULL;
    Node* cloneTail=NULL;
        
    Node* temp=head;
    while(temp!=NULL)
    {
        insertAtTail(cloneHead, cloneTail, temp->data);
        temp=temp->next;
    }
        
    // step 2 cloneNodes add in between original list
    Node* originalNode=head;
    Node* cloneNode=cloneHead;
        
    while(originalNode!=NULL && cloneNode!=NULL)
    {
        Node* forward=originalNode->next;
        originalNode->next=cloneNode;
        originalNode=forward;
            
        forward=cloneNode->next;
        cloneNode->next=originalNode;
        cloneNode=forward;
    }
        
    // step 3 random pointer copy
    temp=head;
        
    while(temp!=NULL)
    {
        if(temp->next!=NULL)
        {
        temp->next->arb = temp->arb ? temp->arb->next : temp->arb;
        }
            
        temp=temp->next->next;
    }
        
    // step 4 revert changes done in step 2
    originalNode=head;
    cloneNode=cloneHead;
        
    while(originalNode!=NULL && cloneNode!=NULL)
    {
        originalNode->next=cloneNode->next;
        originalNode=originalNode->next;
            
        if(originalNode!=NULL)
        {
            cloneNode->next=originalNode->next;
        }
            
        cloneNode=cloneNode->next;
    }
        
    // step 5 Return ans
    return cloneHead;
}