                                                        // Sudoku Solver (Codestudio) //
                                                        // Using Backtracking //
                                                        // Fill empty cells of sudoku puzzle of 9x9 matrix //
                                                        // sudoku must satisfy: //
                                                        // 1) each digit 1-9 must occur once in each row
                                                        // 2) each digit 1-9 must occur once in each col
                                                        // 3) each digit 1-9 must occur once in each 3x3 subgrid
                                                        // T.C = O(9^m) where m is no. of empty cells, S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

bool isSafe(int row, int col, vector<vector<int>> &board, int val)
{
    for(int i=0;i<9;i++)
    {
        // row check, agar pehle se value padi hai
        if(board[row][i]==val)
        {
            return false;
        }
        
        // col check, agar pehle se value padi hai
        if(board[i][col]==val)
        {
            return false;
        }

        // 3*3 matrix check
        if(board[3*(row/3)+i/3][3*(col/3)+i%3]==val)
        {
            return false;
        }
    }

    return true;
}

bool solve(vector<vector<int>> &board)
{
    for(int row=0;row<9;row++)
    {
        for(int col=0;col<9;col++)
        {
            // if cell empty
            if(board[row][col]==0)
            {
                for(int val=1;val<=9;val++)
                {
                    if(isSafe(row, col, board, val))
                    {
                        board[row][col]=val;
                        
                        // recursive call
                        bool furtherPossible=solve(board);
                        
                        if(furtherPossible)
                        {
                            return true;
                        }
                        else
                        {
                            // backtrack
                            board[row][col]=0;
                        }
                    }
                }

                return false;
            }
        }
    }

    return true;
}

void solveSudoku(vector<vector<int>>& sudoku)
{
	// Write your code here
    solve(sudoku);
}
