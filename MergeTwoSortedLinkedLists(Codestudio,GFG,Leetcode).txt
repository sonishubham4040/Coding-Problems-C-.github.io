		// Merge Two Sorted Linked Lists (Codestudio, GFG, Leetcode) //
		// first = 1->4->5->NULL, second = 2->3->5->NULL //
		// final = 1->2->3->4->5->5->NULL //

Node<int>* solve(Node<int>* first, Node<int>* second)
{
    // if first list have only one node, point its next to entire second list
    if(first->next==NULL)
    {
        first->next=second;
        return first;
    }

    Node<int>* curr1=first;
    Node<int>* next1=curr1->next;

    Node<int>* curr2=second;
    Node<int>* next2=curr2->next;

    while(next1!=NULL && curr2!=NULL)
    {
        if((curr2->data>=curr1->data) && (curr2->data<=next1->data))
        {
            // add node in between the node of first list
            curr1->next=curr2;
            next2=curr2->next;
            curr2->next=next1;
            // updating pointer
            curr1=curr2;
            curr2=next2;
        }
        else
        {
            // go one step ahead in first list
            curr1=next1;
            next1=next1->next;

            if(next1==NULL)
            {
                curr1->next=curr2;
                return first;
            }
        }
    }
    return first;
}

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    if(first==NULL)
        return second;

    if(second==NULL)
        return first;

    if(first->data<=second->data)
    {
        solve(first,second);
    }
    else
    {
        solve(second,first);
    }
}
