	        	// Binary Tree To BST (GFG) //
	        	// Using Sorted Inorder and Solve index function //
			// Approach-2 // 
			// T.C = O(nlogn), S.C = O(n) //
			
#include <bits/stdc++.h>
using namespace std;

void inorder(Node *root, vector<int> &ans)
{
    // base case
    if(root==NULL)
    {
        return;
    }

    inorder(root->left, ans);
    ans.push_back(root->data);
    inorder(root->right, ans);
}

void solve(Node* root, vector<int> &ans, int &index)
{
    if(root==NULL)
    {
        return;
    }
    
    solve(root->left, ans, index);
    root->data=ans[index++];
    solve(root->right, ans, index);
}

Node *binaryTreeToBST (Node *root)
{
    //Your code goes here

    vector<int> ans;
    inorder(root, ans);
    
    sort(ans.begin(), ans.end());
    
    int index=0;
    solve(root, ans, index);
    
    return root;
}