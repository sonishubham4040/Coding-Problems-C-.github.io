              // N-Queens (Leetcode-51) //
              // Using Backtracking //
              // Put N queens in NxN chessboard such that they can't attack each other, attacks can be if: queens in same row, queens in same col, and in same diagonal //
              // Return safe placed queens chessboard position columns //

// n=4 => [[".Q..","...Q","Q...","..Q."], 
//         ["..Q.","Q...","...Q",".Q.."]] //
/*
            Like this:
            [3 1 4 2] = ["..Q.","Q...","...Q",".Q.."]
0 0 1 0     
1 0 0 0
0 0 0 1
0 1 0 0
        And [2 4 1 3] = [".Q..","...Q","Q...","..Q."]
0 1 0 0   
0 0 0 1
1 0 0 0
0 0 1 0
*/
			        // T.C = O(n*n), S.C = O(n*n) //

#include <bits/stdc++.h>
using namespace std;

bool isSafe(int row, int col, vector<string> &board, int n)
{
    int x=row;
    int y=col;
    
    // check for same row
    while(y>=0)
    {
        if(board[x][y]=='Q')
        {
            return false;
        }
        y--;
    }
    
    x=row;
    y=col;
    
    // check for upper diagonaal
    while(x>=0 && y>=0)
    {
        if(board[x][y]=='Q')
        {
            return false;
        }
        x--;
        y--;
    }
    
    x=row;
    y=col;
    
    // check for lower diagonaal
    while(x<n && y>=0)
    {
        if(board[x][y]=='Q')
        {
            return false;
        }
        x++;
        y--;
    }
    
    return true;
}

void solve(int col, vector<vector<string>> &ans, vector<string> &board, int n)
{
    // base case
    if(col==n)
    {
        ans.push_back(board);
        return;
    }
    
    // solve 1 case and rest recursion will handle
    for(int row=0;row<n;row++)
    {
        if(isSafe(row, col, board, n))
        {
            // queen rakhdo board me
            board[row][col]='Q';
            solve(col+1, ans, board, n);
            
            // backtrack
            board[row][col]='.';
        }
    }
}

vector<vector<string>> solveNQueens(int n)
{
    // Code here
    vector<string> board(n, string(n, '.'));
    vector<vector<string>> ans;
    
    solve(0, ans, board, n);
    
    return ans;
}
