			// Striver's SDE Sheet - Arrays Q2 //
			// Pascal's Triangle (Leetcode-118), Codestudio, GFG //
/*
        1
      1  1
    1  2  1
  1  3   3  1
 1  4  6  4  1 
*/
			// 3 Types of problems:- //
			// 1) Find element at row=4, col=2 => 3 //
			// 2) Find Nth row of pascal triangle, n=3 => 1 2 1 //
			// 3) Given N, print entire triangle, n=5 => Above Triangle //

#include <bits/stdc++.h>
using namespace std;

// Type-1 Problem (Using nCr Math Operation)
// T.C = O(col), S.C = O(1)
int printElementAtRowCol(int row, int col)
{
    row=row-1; // n = row
    col=col-1; // r = col
    
    int ans=1;
    
    for(int i=0;i<col;i++)
    {
        ans=ans*(row-i);
        ans=ans/(i+1);
    }
    
    return ans;
}

// Type-2 Problem (Using type-1 approach BRUTE FORCE)
// T.C = O(n*col)
void printNthRow(int n)
{
    for(int col=1;col<=n;col++)
    {
        cout<<printElementAtRowCol(n,col)<<" ";
    }
}

// Type-2 Problem (OPTIMAL)
// T.C = O(n), S.C = O(1)
void printNthRowOptimal(int n) 
{
    int ans=1;
    cout<<ans<<" ";
    
    for(int i=1;i<n;i++)
    {
        ans=(ans)*(n-i);
        ans=(ans)/(i);
        cout<<ans<<" ";
    }
}

/*
// Type-3 Problem (Leetcode-118)
vector<int> generateRow(int row)
{
    vector<int> res;
    res.push_back(1);

    long long ans=1;

    for(int col=1;col<row;col++)
    {
        ans=ans*(row-col);
        ans=ans/col;
        res.push_back(ans);
    }

    return res;
}

vector<vector<int>> generate(int numRows)
{
    // code here
    vector<vector<int>> ans;

    for(int i=1;i<=numRows;i++)
    {
        ans.push_back(generateRow(i));
    }

    return ans;
}
*/

int main()
{
    int n=4;
    int row=5;
    int col=3;
    
    cout<<"Elemet at given row and col: "<<printElementAtRowCol(row,col)<<endl;
    
    cout<<"Print Nth row: "<<endl;
    printNthRow(n);
    cout<<endl;
    
    cout<<"Print Nth row optimal: "<<endl;
    printNthRowOptimal(n);
    cout<<endl;
}
