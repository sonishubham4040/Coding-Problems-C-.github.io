			// Rat In A Maze Problem-1 (Gfg, Codestudio) //
			// m[][] = {{1, 0, 0, 0},
         		// {1, 1, 0, 1}, 
         		// {1, 1, 0, 0},
         		// {0, 1, 1, 1}} => Outout: DDRDRR DRDDRR //
			// m[][] = {{1, 0},
         		// {1, 0}} => Output: -1 //
			// Recursion And Backtracking //
         
#include <bits/stdc++.h>
using namespace std;

bool isSafe(int x, int y, vector<vector<int>> & arr, int n, vector<vector<int>> visited)
{
    if((x>=0 && x<n) && (y>=0 && y<n) && (visited[x][y]==0) && (arr[x][y]==1))
    {
        return true;
    }
    else
    {
        return false;
    }
}

void solve(vector <vector<int>> & arr, int n, int x, int y, vector<vector<int>> visited, vector<string> &ans, string path)
{
    // you have reached x,y here
    
    // base case
    if(x==n-1 && y==n-1)
    {
        ans.push_back(path);
        return ;
    }
    
    visited[x][y]=1;
    
    // 4 choices D,L,R,U
    
    // down
    int newx=x+1;
    int newy=y;
    if(isSafe(newx,newy,arr,n,visited))
    {
        path.push_back('D');
        solve(arr,n,newx,newy,visited,ans,path);
        path.pop_back();
    }
    
    // right
    newx=x;
    newy=y+1;
    if(isSafe(newx,newy,arr,n,visited))
    {
        path.push_back('R');
        solve(arr,n,newx,newy,visited,ans,path);
        path.pop_back();
    }
    
    // left
    newx=x;
    newy=y-1;
    if(isSafe(newx,newy,arr,n,visited))
    {
        path.push_back('L');
        solve(arr,n,newx,newy,visited,ans,path);
        path.pop_back();
    }
    
    // up
    newx=x-1;
    newy=y;
    if(isSafe(newx,newy,arr,n,visited))
    {
        path.push_back('U');
        solve(arr,n,newx,newy,visited,ans,path);
        path.pop_back();
    }
    
    // backtrack
    visited[x][y]=0;
}

vector <string> searchMaze(vector <vector<int>> & arr, int n)
{
    vector<string> ans;
    
    if(arr[0][0]==0)
    {
        return ans;
    }
    
    int srcx=0;
    int srcy=0;
    
    vector<vector<int>> visited = arr;
    
    // initialize with 0
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            visited[i][j]=0;
        }
    }
    
    string path="";
    solve(arr,n,srcx,srcy,visited,ans,path);
    sort(ans.begin(),ans.end());
    return ans;
}

int main()
{
    vector<vector<int>> arr[][] = {{1, 0, 0, 0},{1, 1, 0, 1},{1, 1, 0, 0},{0, 1, 1, 1}};
    // Don't know how to print 
}