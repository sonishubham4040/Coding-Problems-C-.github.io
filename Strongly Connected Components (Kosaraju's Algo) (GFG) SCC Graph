                                          			// Strongly Connected Components (Kosaraju's Algo) (GFG) //
                                          			// Kosaraju Algo for SCC //
                                          			// 1) Sort all nodes according to finishing time via dfs
                                          			// 2) Reverse the graph
                                          			// 3) Do dfs traversal
                                          			// T.C = O(V+E), S.C = O(V+E) //

#include <bits/stdc++.h>  
using namespace std;

private:
void dfs(int node, vector<int> &vis, vector<vector<int>>& adj, stack<int> &st)
{
    vis[node]=1;
    
    for(auto i: adj[node])
    {
        if(!vis[i])
        {
            dfs(i, vis, adj, st);
        }
    }
    
    st.push(node);
}

void dfs3(int node, vector<int> &vis, vector<vector<int>> &adjT)
{
    vis[node]=1;
    
    for(auto i: adjT[node])
    {
        if(!vis[i])
        {
            dfs3(i, vis, adjT);
        }
    }
}

public:
int kosaraju(int V, vector<vector<int>>& adj)
{
    //code here
    // Kosaraju algo
    // 1) sort all nodes according to finishing time via dfs
    // 2) reverse the graph
    // 3) do dfs traversal
    
    // 1st step
    vector<int> vis(V, 0);
    stack<int> st;
    
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            dfs(i, vis, adj, st);
        }
    }
    
    // 2nd step
    vector<vector<int>> adjT(V);
    
    for(int i=0;i<V;i++)
    {
        vis[i]=0;
        
        for(auto j: adj[i])
        {
            adjT[j].push_back(i);
        }
    }
    
    // 3rd step
    int scc=0;
    
    while(!st.empty())
    {
        int node=st.top();
        st.pop();
        
        if(!vis[node])
        {
            scc++;
            dfs3(node, vis, adjT);
        }
    }
    
    return scc;
}
