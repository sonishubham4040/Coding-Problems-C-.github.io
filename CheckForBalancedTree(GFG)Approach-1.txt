		// Check For Balanced Tree (GFG), Leetcode-110 //
		// A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree //
		// Approach-1 //		
		// T.C = O(n*n), S.C = O(n) //

#include<bits/stdc++.h>
using namespace std;

int height(struct Node* node)
{
    if(node==NULL)
    {
        return 0;
    }
        
    int left=height(node->left);
    int right=height(node->right);
        
    int ans=max(left,right)+1;  
        
    return ans;
}
    
//Function to check whether a binary tree is balanced or not.
bool isBalanced(Node *root)
{
    //  Your Code here
    // base case
    if(root==NULL)
    {
        return true;
    }
        
    bool left=isBalanced(root->left);
    bool right=isBalanced(root->right);
        
    bool diff=abs(height(root->left)-height(root->right)) <= 1;
        
    if(left && right && diff)
    {
        return true;
    }
    else
    {
        return false;
    }
}
