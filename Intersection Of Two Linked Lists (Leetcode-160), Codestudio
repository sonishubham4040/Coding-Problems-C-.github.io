                                            // Intersection Of Two Linked Lists (Leetcode-160), Codestudio //
                                            // Approach-1: Using Nested Loop, T.C = O(n*m), S.C = O(1) //
                                            // Approach-2: Using Map, T.C = O(n+m), S.C = O(n) //
                                            // Approach-3: Using Length Diff., T.C = O(n+m), S.C = O(1)
                                            // Approach-4: Using Two Pointer, T.C = O(n+m), S.C = O(1)
                                            // headA = a1->a2->c1->c2->c3, headB = b1->b2->b3->c1->c2->c3 => c1 (Intersect at c1) //

#include <bits/stdc++.h>
using namespace std;

// Approach-1: Using Nested Loop, T.C = O(n*m), S.C = O(1)
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
{
    ListNode *temp;

	while(headA!=NULL)
    {
		temp=headB;

		while(temp!=NULL)
        {
			if(headA==temp)
            {
				return headA;
			}

			temp=temp->next;
		}

		headA=headA->next;
	}
    
	return NULL;
}

// Approach-2: Using Map, T.C = O(n+m), S.C = O(n)
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
{
    unordered_map<ListNode*, int> mp;

    while(headA!=NULL)
    {
        mp[headA]++;
        headA=headA->next;
    }

    while(headB!=NULL)
    {
        if(mp[headB]>0)
        {
            return headB;
        }

        headB=headB->next;
    }

    return NULL;
}

// Approach-3: Using Length Diff., T.C = O(n+m), S.C = O(1)
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
{
    int n=0;
    int m=0;

    ListNode* temp1=headA;
    ListNode* temp2=headB;
    
    while(temp1!=NULL)
    {
        n++;
        temp1=temp1->next;
    }

    while(temp2!=NULL)
    {
        m++;
        temp2=temp2->next;
    }

    int diff=abs(n-m);

    if(n>m)
    {
        while(diff)
        {
            headA=headA->next;
            diff--;
        }
    }
    else
    {
        while(diff)
        {
            headB=headB->next;
            diff--;
        }
    }

    while(headA!=NULL && headB!=NULL)
    {
        if(headA==headB)
        {
            return headA;
        }

        headA=headA->next;
        headB=headB->next;
    }

    return NULL;
}

// Approach-4: Using Two Pointer, T.C = O(n+m), S.C = O(1)
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
{
    ListNode* temp1=headA;
    ListNode* temp2=headB;

    while(temp1!=temp2)
    {
        if(temp1==NULL)
        {
            temp1=headB;
        }
        else
        {
            temp1=temp1->next;
        }

        if(temp2==NULL)
        {
            temp2=headA;
        }
        else
        {
            temp2=temp2->next;
        }
    }
    
    return temp1;
}
