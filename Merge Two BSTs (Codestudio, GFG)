                                          // Merge Two BSTs (Codestudio), GFG //
                                          // Using Inorder and inorderToBST //
                                          // Approach-1 //
                                          // T.C = O(n+m), S.C = O(n+m)//

#include <bits/stdc++.h>
using namespace std;

vector<int> mergeTwoArrays(vector<int> &bst1, vector<int> &bst2)
{
    vector<int> ans(bst1.size() + bst2.size());

    int i=0, j=0;
    int k=0;

    while(i<bst1.size() && j<bst2.size())
    {
        if(bst1[i]<bst2[j])
        {
            ans[k++]=bst1[i++];
        }
        else
        {
            ans[k++]=bst2[j++];
        }
    }

    while(i<bst1.size())
    {
        ans[k++]=bst1[i++];
    }

    while(j<bst2.size())
    {
        ans[k++]=bst2[j++];
    }

    return ans;
}

void inorder(TreeNode<int> *root, vector<int> &ans)
{
    if(root==NULL)
    {
        return;
    }

    inorder(root->left, ans);
    ans.push_back(root->data);
    inorder(root->right, ans);
}

TreeNode<int>* inorderToBST(int s, int e, vector<int> &ans)
{
    // base case
    if(s>e)
    {
        return NULL;
    }

    int mid=(s+e)/2;

    TreeNode<int>* newRoot=new TreeNode<int>(ans[mid]);
    newRoot->left=inorderToBST(s, mid-1, ans);
    newRoot->right=inorderToBST(mid+1, e, ans);

    return newRoot;
}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2)
{
    // Write your code here.

    // step-1 : store inorder
    vector<int> bst1;
    vector<int> bst2;

    inorder(root1, bst1);
    inorder(root2, bst2);

    // step-2: merge both sorted arrays
    vector<int> merge=mergeTwoArrays(bst1, bst2);

    // step-3: use merged inorder array to build bst
    int s=0, e=merge.size()-1;
    
    return inorderToBST(s, e, merge);
}
