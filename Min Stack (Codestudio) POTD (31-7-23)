								// Min Stack (Codestudio) POTD (31-7-23) //
								// 2 Approaches //
								// 1) Using Array //
								// 2) Using Stack Pair //
								// T.C = O(1), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

// Approach-1: Using Array
class minStack
{
	// Write your code here.
	int topp;
	int *arr;
	int *mini;
	int size;
	
	public:
		
		// Constructor
		minStack() 
		{ 
			// Write your code here.
			size=1000001;
			topp=-1;
			arr=new int[size];
			mini=new int[size];
		}
		
		void push(int num)
		{
			// Write your code here.
			topp+=1;
			arr[topp]=num;

			if(topp==0)
			{
				mini[topp]=num;
			}
			else
			{
				mini[topp]=min(mini[topp-1], num);
			}
		}
		
		int pop()
		{
			// Write your code here.
			if(topp==-1)
			{
				return -1;
			}
			else
			{
				return arr[topp--];
			}
		}
		
		int top()
		{
			// Write your code here.
			if(topp==-1)
			{
				return -1;
			}
			else
			{
				return arr[topp];
			}
		}
		
		int getMin()
		{
			// Write your code here.
			if(topp==-1)
			{
				return -1;
			}
			else
			{
				return mini[topp];
			}
		}
};

// Approach-2: Using Stack Pair
class minStack
{
	// Write your code here.
	stack<pair<int,int>> st;
	
	public:
		
		// Constructor
		minStack() 
		{ 
			// Write your code here.
		}
		
		// Function to add another element equal to num at the top of stack.
		void push(int num)
		{
			// Write your code here.
			if(st.empty())
			{
				st.push({num,num});
			}
			else if(st.top().second<num)
			{
				st.push({num,st.top().second});
			}
			else
			{
				st.push({num,num});
			}
		}
		
		// Function to remove the top element of the stack.
		int pop()
		{
			// Write your code here.
			if(st.empty())
			{
				return -1;
			}
			
			int temp=st.top().first;
			st.pop();
			return temp;
		}
		
		// Function to return the top element of stack if it is present. Otherwise return -1.
		int top()
		{
			// Write your code here.
			if(st.empty())
			{
				return -1;
			}
			else
			{
				return st.top().first;
			}
		}
		
		// Function to return minimum element of stack if it is present. Otherwise return -1.
		int getMin()
		{
			// Write your code here.
			if(st.empty())
			{
				return -1;
			}
			else
			{
				return st.top().second;
			}
		}
};
