                                              			// Number Of Islands 2 (GFG) // 
                                              			// Using Disjoint Set, Union By Size Graph Striver //
                                              			// Update everytime new query comes and store islands at that moment //
                                              			// Return array containing all number of islands //
                                              			// T.C = O(n*m), S.C = O(n*m) //

#include <bits/stdc++.h>
using namespace std;

class DisjointSet
{
    vector<int> parent;
    vector<int> rank;
    vector<int> size;
    
    public:
    DisjointSet(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1, 0);
        size.resize(n+1);
        
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findUParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        return parent[node]=findUParent(parent[node]);
    }
    
    void unionByRank(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(rank[ulp_u]<rank[ulp_v])
        {
            parent[ulp_u]=ulp_v;
        }
        else if(rank[ulp_v]<rank[ulp_u])
        {
            parent[ulp_v]=ulp_u;
        }
        else
        {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(size[ulp_u]<size[ulp_v])
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else
        {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};


class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // code here
        
        DisjointSet ds(n*m);
        
        vector<int> ans;
        
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int cnt=0;
        
        for(auto i: operators)
        {
            int row=i[0];
            int col=i[1];
            
            if(vis[row][col]==1)
            {
                ans.push_back(cnt);
                continue;
            }
            
            vis[row][col]=1;
            cnt++;
            
            int delrow[]={-1, 0, +1, 0};
            int delcol[]={0, +1, 0, -1};
            
            for(int j=0;j<4;j++)
            {
                int nrow=row+delrow[j];
                int ncol=col+delcol[j];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==1)
                {
                    int node=row*m+col;
                    int newNode=nrow*m+ncol;
                    
                    if(ds.findUParent(node)!=ds.findUParent(newNode))
                    {
                        cnt--;
                        ds.unionBySize(node, newNode);
                    }
                }
            }
            
            ans.push_back(cnt);
        }
        
        return ans;
    }
};
