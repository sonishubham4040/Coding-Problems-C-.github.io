                                      			// Maximum Connected Group (GFG) //
                                      			// Disjoint Set, Union By Size Graph Striver //
                                      			// ek 0 ko 1 me kar sakte ho, fir maximum connetcted 1's batao //
                                      			// T.C = O(n*n), S.C = O(n*n) //

#include <bits/stdc++.h>
using namespace std;

class DisjointSet
{
    public:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;
    
    DisjointSet(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1, 0);
        size.resize(n+1);
        
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findUParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        return parent[node]=findUParent(parent[node]);
    }
    
    void unionByRank(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(rank[ulp_u]<rank[ulp_v])
        {
            parent[ulp_u]=ulp_v;
        }
        else if(rank[ulp_v]<rank[ulp_u])
        {
            parent[ulp_v]=ulp_u;
        }
        else
        {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(size[ulp_u]<size[ulp_v])
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else
        {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};

class Solution {
  public:
    int MaxConnection(vector<vector<int>>& grid) {
        // code here
        
        int n=grid.size();
        
        DisjointSet ds(n*n);
        
        // step-1 components jodo 1's wale apas me
        for(int row=0;row<n;row++)
        {
            for(int col=0;col<n;col++)
            {
                if(grid[row][col]==0)
                {
                    continue;
                }
                
                int delrow[]={-1, 0, +1, 0};
                int delcol[]={0, +1, 0, -1};
                
                for(int i=0;i<4;i++)
                {
                    int nrow=row+delrow[i];
                    int ncol=col+delcol[i];
                    
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol]==1)
                    {
                        int node=row*n+col;
                        int newNode=nrow*n+ncol;
                        
                        ds.unionBySize(node, newNode);
                    }
                }
            }
        }
        
        // step-2 0 ko 1 me karo or set me dalo componentske ulp ko, max size nikalo
        int maxi=0;
        
        for(int row=0;row<n;row++)
        {
            for(int col=0;col<n;col++)
            {
                if(grid[row][col]==1)
                {
                    continue;
                }
                
                int delrow[]={-1, 0, +1, 0};
                int delcol[]={0, +1, 0, -1};
                
                set<int> components;
                
                for(int i=0;i<4;i++)
                {
                    int nrow=row+delrow[i];
                    int ncol=col+delcol[i];
                    
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && grid[nrow][ncol]==1)
                    {
                        components.insert(ds.findUParent(nrow*n+ncol));
                    }
                }
                
                int sizeTotal=0;
                for(auto i: components)
                {
                    sizeTotal+=ds.size[i];
                }
                
                maxi=max(maxi, sizeTotal+1);
            }
        }
        
        // if all elements are 1
        for(int i=0;i<n*n;i++)
        {
            maxi=max(maxi, ds.size[ds.findUParent(i)]);
        }
        
        return maxi;
    }
};
