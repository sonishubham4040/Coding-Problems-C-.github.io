			// Find Number (GFG) POTD (29-4-23) //
			// Find Nth smallest number which only contains odd digits i.e. 1,3,5,7,9. For example, the starting numbers which only contain odd digits are 1,3,5,7,9,11,13,15,17,19,31,33,35 and so on. //
			// N=3 => 5, N=13 => 35 //
			// T.C = O(log5n), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

long long findNumber(long long N)
{
    // Code here
    
    long long ans=0;
    
    while(N)
    {
        ans=ans*10;
        
        if(N%5==0)
        {
            ans+=9;
            N/=5;
            N--;
        }
        else if(N%5==1)
        {
            ans+=1;
            N/=5;
        }
        else if(N%5==2)
        {
            ans+=3;
            N/=5;
        }
        else if(N%5==3)
        {
            ans+=5;
            N/=5;
        }
        else
        {
            ans+=7;
            N/=5;
        }
    }
    // Reversing Integer
    long long temp=0;
    
    while(ans)
    {
        int digit=ans%10;
        temp=(temp*10)+digit;
        ans/=10;
    }
    
    return temp; // reversed ans
}

int main()
{
    long long N=13;
    cout<<"Nth starting odd digit number: "<<findNumber(N);
}