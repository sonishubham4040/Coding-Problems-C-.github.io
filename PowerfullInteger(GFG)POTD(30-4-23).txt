			// Powerfull Integer (GFG) POTD (30-4-23) //
			// Given 2d array intervals[start][end] (inclusive) //
			// Return integer that occurs atleat k times //
			// If multiple integers have at least k occurrences, then return the maximum integer out of all those elements //
			// n=3, intervals={{1,3},{4,6},{3,4}}, k=2 => Output: 4 //
			// n=4, intervals={{1,4},{12,45},{3,8},{10,12}}, k=3 => Output: -1 //
			// n=5, intervals={{16,21},{5,8},{12,17},{17,29},{9,24}}, k=3 => Output: 21 //
			// T.C = O(nlogn), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

int powerfullInteger(int n, vector<vector<int>> &intervals, int k)
{
    // Code here
    
    map<int,int> mp;
    
    for(auto x:intervals)
    {
        int l=x[0], r=x[1];
        mp[l]++;
        mp[r+1]--;
    }
    
    int curr=0;
    int maxi=-1;
    bool flag=false; // candidate for maximum
    
    for(auto it:mp)
    {
        curr+=it.second; // prefixsum
        if(curr>=k)     // prefixsum >=k
        {
            flag=true;
            maxi=it.first;
        }
        else if(flag==true) // prev element is the candidate
        {
            maxi=it.first-1;
            flag=false;
        }
        else
        {
            flag=false;
        }
    }
    
    return maxi;
}