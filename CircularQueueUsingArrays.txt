				// Circular Queue Using Arrays //

class CircularQueue
{
    int *arr;
    int size;
    int front;
    int rear;

    public:
    
    CircularQueue(int n)
    {
        size=n;
        arr=new int[size];
        front=rear=-1;
    }

    bool enqueue(int value)
    {
        // to check if queue is full
        if((front==0 && rear==size-1) || (rear==(front-1)%(size-1)))
        {
            return false;
        }
        else if(front==-1) // first element to push
        {
            front=rear=0;
        }
        else if(rear==size-1 && front!=0) // to maintain cyclic nature
        {
            rear=0;
        }
        else
        {
            rear++; // normal flow
        }

        arr[rear]=value; // push inside the queue
        return true;
    }

    int dequeue()
    {
        if(front==-1) // to check queue is empty
        {
            return -1;
        }

        int ans=arr[front];
        arr[front]=-1;

        if(front==rear) // single element
        {
            front=rear=-1;
        }
        else if(front==size-1) // to maintain cyclic nature
        {
            front=0;
        }
        else
        {
            front++; // normal flow
        }
        return ans;
    }
};