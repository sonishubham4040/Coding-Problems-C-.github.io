			// Flood Fill Algorithm (GFG) //
			// Graph DFS //
			// Given 2d matrix and source coordinate sr, sc starting pixel and a newColor value //
			// Perform flood fill in all 4 directions of same starting pixel value to its neighbours and change it to newColor value //
			// image = {{1,1,1},{1,1,0},{1,0,1}}, sr=1, sc=1, newColor=2 Output: {{2,2,2},{2,2,0},{2,0,1}} //
/*
1 1 1       2 2 2
1 1 0  =>   2 2 0
1 0 1       2 0 1
*/
			// T.C = O(n*m), S.C = O(n*m) //

#include <iostream>
using namespace std;

void dfs(int row, int col, vector<vector<int>> &ans, vector<vector<int>> &image, int delRow[], int delCol[], int iniColor, int newColor)
{
    ans[row][col]=newColor;
    
    int n=image.size();
    int m=image[0].size();
    
    for(int i=0;i<4;i++)
    {
        int nrow=row+delRow[i];
        int ncol=col+delCol[i];
        
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]==iniColor
                    && ans[nrow][ncol]!=newColor)
        {
            dfs(nrow, ncol, ans, image, delRow, delCol, iniColor, newColor);
        }            
    }
}

vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor)
{
    // Code here 
    vector<vector<int>> ans=image;
    
    int iniColor=image[sr][sc];
    
    int delRow[]={-1, 0, +1, 0};
    int delCol[]={0, +1, 0, -1};
    
    dfs(sr, sc, ans, image, delRow, delCol, iniColor, newColor);
    
    return ans;
}
