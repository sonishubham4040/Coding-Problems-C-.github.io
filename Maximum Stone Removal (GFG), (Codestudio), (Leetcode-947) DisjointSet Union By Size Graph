                                        			// Maximum Stone Removal (GFG) //
                                        			// Most Stones Removed with Same Row or Column (Codestudio), (Leetcode-947) //
                                        			// Using Disjoint Set, Union By Size Graph Striver //
                                        			// Same row/col walo ko connect kia fir total n nodes me se components minus kardiye //
                                        			// T.C = O(n+k), S.C = O(k) //

#include <bits/stdc++.h>
using namespace std;

class DisjointSet
{
    public:
    vector<int> parent;
    vector<int> rank;
    vector<int> size;
    
    DisjointSet(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1, 0);
        size.resize(n+1);
        
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findUParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        return parent[node]=findUParent(parent[node]);
    }
    
    void unionByRank(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(rank[ulp_u]<rank[ulp_v])
        {
            parent[ulp_u]=ulp_v;
        }
        else if(rank[ulp_v]<rank[ulp_u])
        {
            parent[ulp_v]=ulp_u;
        }
        else
        {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(size[ulp_u]<size[ulp_v])
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else
        {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};

class Solution {
  public:
    int maxRemove(vector<vector<int>>& stones, int n) {
        // Code here
        
        int maxRow=0;
        int maxCol=0;
        
        for(auto i: stones)
        {
            maxRow=max(maxRow, i[0]);
            maxCol=max(maxCol, i[1]);
        }
        
        DisjointSet ds(maxRow+maxCol+1);
        unordered_map<int,int> stoneNodes;
        
        for(auto i: stones)
        {
            int nodeRow=i[0];
            int nodeCol=i[1]+maxRow+1;
            
            ds.unionBySize(nodeRow, nodeCol);
            stoneNodes[nodeRow]=1;
            stoneNodes[nodeCol]=1;
        }
        
        int cnt=0;
        for(auto i: stoneNodes)
        {
            if(ds.findUParent(i.first)==i.first)
            {
                cnt++;
            }
        }
        
        return n-cnt;
    }
};
