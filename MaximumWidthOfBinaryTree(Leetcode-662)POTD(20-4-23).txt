		// Maximum Width Of Binary Tree (Leetcode-662) POTD (20-4-23) //
/*
          1
        /   \
       2     3
     /        \
   4           5
  /            / 
6             7
*/
		// Ans=> 7 (Maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7)) //
		// leftNode=2*i+1, rightNode=2*i+2, Using segment tree formula (Striver TUF) //
		// T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

int widthOfBinaryTree(TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }

    queue<pair<TreeNode*,int>> q; // node, index
    q.push(make_pair(root,0));

    int ans=0;

    while(!q.empty())
    {
        int size=q.size();
            
        int startIndex=q.front().second;
        int endIndex=q.back().second;

        ans=max(ans, endIndex - startIndex + 1);

        for(int i=0;i<size;i++)
        {
            pair<TreeNode*,int> temp=q.front();
            TreeNode* node=temp.first;
            int index=temp.second;
            q.pop();

            if(node->left)
            {
                q.push(make_pair(node->left, 2LL*index+1));
            }
            if(node->right)
            {
                q.push(make_pair(node->right, 2LL*index+2));
            }
        }
    }

    return ans;
}