			// Diameter Of A Binary Tree (GFG), Leetcode-543 //
			// Approach-2 //
			// T.C = O(n), S.C = O(n), Using pair<int,int> //
			// (first=diameter, second=height) //

#include<bits/stdc++.h>
using namespace std;

pair<int,int> diameterFast(Node* root)
{
    // base case
    if(root==NULL)
    {
        pair<int,int> p=make_pair(0,0); // <diameter, height> 
        return p;
    }
        
    pair<int,int> left=diameterFast(root->left);
    pair<int,int> right=diameterFast(root->right);
        
    int op1=left.first; // diameter
    int op2=right.first; // diameter
    int op3=left.second + right.second + 1; // height
        
    pair<int,int> ans;
    ans.first=max(op1, max(op2,op3)); // max of diameter
    ans.second=max(left.second, right.second) + 1; // max of height
        
    return ans;
}
    
// Function to return the diameter of a Binary Tree.
int diameter(Node* root)
{
    // Your code here
    return diameterFast(root).first;
}