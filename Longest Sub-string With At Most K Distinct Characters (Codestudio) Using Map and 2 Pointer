                                          // Longest Sub-string With At Most K Distinct Characters (Codestudio) //
                                          // Using Map and 2 pointer //
                                          // Two approaches //
                                          // S = "aabacbebebe", K=3 => 7 ("cbebebe" is the longest) //
                                          // S = "aaaaa", K=2 => 5 (return entire size) //
                                          // T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

// Approach-1
int getLengthofLongestSubstring(int k, string s)
{
   unordered_map<char,int> mp;
   int i=0;
   int j=0;
   int ans=-1;

   for(i=0;i<s.size();i++)
   {
      if(mp.size()==k)
      {
         if(mp.find(s[i])==mp.end())
         {
               while(mp.size()==k)
               {
                  mp[s[j]]--;
                  if(mp[s[j]]==0)
                  {
                     mp.erase(s[j]);
                  }

                  j++;
               }
         }

         ans=max(ans, i-j+1);
      }

      mp[s[i]]++;
   }

   if(mp.size()==k)
   {
      ans=max(ans, i-j);
   }
   else
   {
      ans=s.size();
   }

   return ans;
}

/*
// Approach-2 
int getLengthofLongestSubstring(int k, string s)
{
   // Write your code here.
   unordered_map<char,int> mp;
   int i=0;
   int j=0;
   int ans=-1;

   for(i=0;i<s.size();i++)
   {
      mp[s[i]]++;

      while(mp.size()>k)
      {
         mp[s[j]]--;
         if(mp[s[j]]==0)
         {
            mp.erase(s[j]);
         }

         j++;
      }

      ans=max(ans, i-j+1);
   }

   return ans;
}
*/
