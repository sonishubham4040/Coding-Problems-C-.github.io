		// Reverse Nodes in k-Group (Leetcode-25) //
		// Input: head = [1,2,3,4,5], k = 2 => Output: [2,1,4,3,5] //
		// Input: head = [1,2,3,4,5], k = 3 => Output: [3,2,1,4,5] //

#include<bits/stdc++.h>
using namespace std;

ListNode* reverseKGroup(ListNode* head, int k) {
        
    // if k is not multiple of no. of nodes    
    ListNode* cursor=head;
    for(int i=0;i<k;i++)
    {
        if(cursor==NULL) 
        return head;
        
        cursor=cursor->next;
    }   

    // base case
    if(head==NULL)
    {
        return NULL;
    }
    
    // step-1 Reverse first k nodes
    ListNode* forward=NULL;
    ListNode* curr=head;
    ListNode* prev=NULL;
    int cnt=0;
    
    while(curr!=NULL && cnt<k)
    {
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
        cnt++;
    }
    
    // step-2 recursion dekh lega
    if(forward!=NULL)
    {
        head->next=reverseKGroup(forward,k);
    }
    
    // step-3 return head of reversed list
    return prev;
    }