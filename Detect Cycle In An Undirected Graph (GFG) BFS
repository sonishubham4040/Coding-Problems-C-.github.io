                          			// Detect Cycle In An Undirected Graph (GFG) //
                          			// Using BFS Graph Striver //
                          			// Agar visited hai lekin parent ke equal nahi hai node to cycle banegi //
                          			// 0 Based indexing //
                          			// T.C = O(n+2E), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

private: // BFS
bool detect(int src, vector<int> adj[], int vis[])
{
    vis[src]=1;
    
    // node, parent node
    queue<pair<int,int>> q;
    q.push({src, -1});
    
    while(!q.empty())
    {
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        
        for(auto i: adj[node])
        {
            if(!vis[i])
            {
                vis[i]=1;
                q.push({i, node});
            }
            else if(parent!=i)
            {
                return true;
            }
        }
    }
    
    return false;
}

public:
bool isCycle(int V, vector<int> adj[]) 
{
    // Code here
    int vis[V]={0};
    
    // for graph components check
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            if(detect(i, adj, vis)==true)
            {
                return true;
            }
        }
    }
    
    return false;
}
