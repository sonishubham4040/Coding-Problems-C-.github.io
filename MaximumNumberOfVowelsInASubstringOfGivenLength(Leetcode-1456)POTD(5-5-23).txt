		// Maximum Number Of Vowels In A Substring Of Given Length (Leetcode-1456) POTD (5-5-23) //
		// Using Sliding Window and Set //
		// Input: s="abciiidef", k=3 => Output: 3 (iii) //
		// Input: s="leetcode", k=3 => Output: 2 ("lee" or "eet" or "ode") //
		// 2 Approaches //
		// T.C = O(n), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

// Approach-1
int maxVowels(string s, int k)
{
    unordered_set<char> vowels={'a', 'e', 'i', 'o', 'u'};
    
    int ans=0;
    int count=0;

    for(int i=0;i<s.size();i++)
    {
        if(i>=k && vowels.count(s[i-k]))
        {
            count--;
        }
        if(vowels.count(s[i]))
        {
            count++;
        }
        ans=max(ans, count);
    }

    return ans;
}
/*
// Approach-2
int maxVowels(string s, int k) 
{
    unordered_set<char> vowels={'a', 'e', 'i', 'o', 'u'};
    
    int ans=0;
    int count=0;

    for(int i=0;i<k;i++)
    {
        if(vowels.count(s[i]))
        {
            count++;
        }
    }

    ans=count;

    for(int i=k;i<s.size();i++)
    {
        if(vowels.count(s[i-k]))
        {
            count--;
        }
        if(vowels.count(s[i]))
        {
            count++;
        }
        ans=max(ans, count);
    }

    return ans;
}
*/