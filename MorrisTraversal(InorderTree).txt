			// Morris Traversal (Inorder Tree Traversal without recursion and without stack) //
/*
            1
          /   \
         2     3
       /   \
      4     5
*/
			// Ans: 4 2 5 1 3  // 
			// T.C = O(n), S.C = O(1) //

#include <bits/stdc++.h>
using namespace std;

struct tNode
{
	int data;
	struct tNode* left;
	struct tNode* right;
};

void MorrisTraversal(struct tNode* root)
{
	struct tNode *current, *pre;

	if(root==NULL)
	{
	    return;
	}

	current=root;
	
	while(current!=NULL) 
	{
		if(current->left==NULL) 
		{
			cout<<current->data<<" ";
			current=current->right;
		}
		else 
		{
			// Find Predecessor  
			pre=current->left;
			while(pre->right!=NULL && pre->right!=current)
			{
			    pre=pre->right;
			}
			
			// Temporary link creation
			if(pre->right==NULL) 
			{
				pre->right=current;
				current=current->left;
			}
			
            		// Temporary link remove
			else 
			{
				pre->right=NULL;
				cout<<current->data<<" ";
				current=current->right;
			} 
		} 
	} 
}

struct tNode* newtNode(int data)
{
	struct tNode* node=new tNode;
	node->data=data;
	node->left=NULL;
	node->right=NULL;

	return (node);
}

int main()
{
	struct tNode* root=newtNode(1);
	root->left=newtNode(2);
	root->right=newtNode(3);
	root->left->left=newtNode(4);
	root->left->right=newtNode(5);

	MorrisTraversal(root);

	return 0;
}

