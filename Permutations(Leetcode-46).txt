			// Permutations (Leetcode-46) //
			// [1,2,3] = [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] //
			// [0,1] = [[0,1],[1,0]] //

#include <bits/stdc++.h>
using namespace std;

void solve(vector<int> nums, int index, vector<vector<int>> & ans)
{
    // base case
    if(index>=nums.size())
    {
        ans.push_back(nums);
        return ;
    }
    
    for(int j=index;j<nums.size();j++)
    {
        swap(nums[index],nums[j]);
        solve(nums,index+1,ans);
        
        // backtrack
        swap(nums[index],nums[j]); // because change is in original array
    }
}

vector<vector<int>> permute(vector<int>& nums)
{
    vector<vector<int>> ans;
    int index=0;
    solve(nums,index,ans);
    return ans;
}

int main()
{
    vector<int> nums={1,2,3};
    cout<<"possible permutations: "<<endl;
    // don't know how to print
}
