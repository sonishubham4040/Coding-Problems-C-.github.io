            		// Implement A Queue Using Arrays //
			// T.C=O(1) //

#include <bits/stdc++.h>
using namespace std;

class Queue 
{
    int *arr;
    int size;
    int qfront;
    int rear;

public:
    Queue()
    {
        // Implement the Constructor
        size=100001;
        arr=new int[size];
        qfront=0;
        rear=0;
    }

    /*------- Public Functions of Queue ---------*/

    bool isEmpty()
    {
        // Implement the isEmpty() function
        if(qfront==rear)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    void enqueue(int data) 
    {
        // Implement the enqueue() function
        if(rear==size)
        {
            cout<<"Queue is full"<<endl;
        }
        else
        {
            arr[rear++]=data;
        }
    }

    int dequeue() 
    {
        // Implement the dequeue() function
        if(qfront==rear)
        {
            return -1;
        }
        else
        {
            int ans=arr[qfront];
            arr[qfront++]=-1;

            if(qfront==rear)
            {
                qfront=0;
                rear=0;
            }
            return ans;
        }
    }

    int front() 
    {
        // Implement the front() function
        if(qfront==rear)
        {
            return -1;
        }
        else
        {
            return arr[qfront];
        }
    }
};

int main()
{
    Queue q;
    q.enqueue(11);
    q.enqueue(22);
    q.enqueue(33);
    
    cout<<"front: "<<q.front()<<endl;
    
    q.dequeue();
    
    cout<<"front: "<<q.front()<<endl;
    
    cout<<"empty or not: "<<q.isEmpty()<<endl;
}
    