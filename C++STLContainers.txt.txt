                    // C++ STL CONTAINERS //

#include <iostream>
#include<vector>
#include<array>
#include<deque>
#include<list>
#include<stack>
#include<queue>
#include<set>
#include<map>
using namespace std;

int main() 
{
    cout<<"<-------------------ARRAY----------------->"<<endl;
                // ARRAY //

 array<int ,4> r = {97,98,99,100};
 cout<<"size of array r: "<<r.size()<<endl;
 
cout<<"Element at first of array r: "<<r.front()<<endl;
cout<<"Element at last of array r: "<<r.back()<<endl;

cout<<"element at index 2 of array r: "<<r.at(2)<<endl; 
cout<<"empty or not: "<<r.empty()<<endl;


cout<<"<-----------------VECTOR-------------------->"<<endl;
// VECTOR (Dynamic array) increases its size as required //

 vector<int> v;
 vector<int> a(5,1);
 vector<int > c(a);
 cout<<"elements of vector a: ";
 for(int i:a)
 {
     cout<<i<<" ";
 }cout<<endl;
  cout<<"elements of copy vector c: ";
 for(int i:c)
 {
     cout<<i<<" ";
 }
 cout<<endl;
 cout<<"size of vector v: "<<v.size()<<endl;
 cout<<"capacity of vector v: "<<v.capacity()<<endl;
    v.push_back(2);
   cout<<"size of vector v: "<<v.size()<<endl;
 cout<<"capacity of vector v: "<<v.capacity()<<endl;
 v.push_back(5);
  cout<<"size of vector v: "<<v.size()<<endl;
 cout<<"capacity of vector v: "<<v.capacity()<<endl;
 v.push_back(8);
  cout<<"size of vector v: "<<v.size()<<endl;
 cout<<"capacity of vector v: "<<v.capacity()<<endl;
 
 cout<<"element of vector v at 2 index: "<<v.at(2)<<endl;
 
 cout<<"before vector v pop: "<<endl;
 for(int i:v)
 {
     cout<<i<<" ";
 }
 cout<<endl;
 
 cout<<"after vector v pop: "<<endl;
 
 v.pop_back();
 for(int i:v)
 {
     cout<<i<<" ";
 }cout<<endl;
 

 
 cout<<"before vector v clear size: "<<v.size()<<endl;
 cout<<"before vector v clear capacity: "<<v.capacity()<<endl;
 v.clear();
 
 cout<<"after vector v clear size: "<<v.size()<<endl;
 cout<<"before vector v clear capacity: "<<v.capacity()<<endl;
 
 cout<<"<---------DEQUE(Doubly ended queue)---------->"<<endl;
            // Deque (push or pop from both ends //
                  
 deque<int> d;
 
 d.push_back(3);

 d.push_front(1);
 for(int i:d)
 {
     cout<<i<<" ";
 }cout<<endl;
 
 //d.pop_front();
 for(int i:d)
 {
     cout<<i<<" ";
 }cout<<endl;
 
  cout<<"element at index 1 of deque d: "<<d.at(1)<<endl;
  cout<<"front: "<<d.front()<<endl;
  cout<<"back: "<<d.back()<<endl;
  cout<<"empty or not: "<<d.empty()<<endl;
  
  cout<<"size before erase: "<<d.size()<<endl;
  d.erase(d.begin(),d.begin()+1);
  cout<<"size after erase: "<<d.size()<<endl;
  cout<<"elements remaining: ";
  for(int i:d)
 {
     cout<<i<<" ";
}cout<<endl;

cout<<"<---------------------LIST------------------>"<<endl;
                    // List // 
                    
list<int> l;
list<int> n(5,20);
cout<<"print 20 number 5 times: ";
for(int i:n)
{
    cout<<i<<" ";
}cout<<endl;
cout<<"size of list: "<<l.size()<<endl;
l.push_back(1);
l.push_back(2);
l.push_front(0);
for(int i:l)
{
    cout<<i<<" ";
}cout<<endl;

l.erase(l.begin());
cout<<"after erase from begin: ";
for(int i:l)
{
    cout<<i<<" ";
}cout<<endl;

cout<<"<-----------------STACK---------------->"<<endl;
             // Stack (LIFO = last in first out) //

stack<string> s;

s.push("the");
s.push("shubham");
s.push("soni");
cout<<"top element: "<<s.top()<<endl;

s.pop();
cout<<"top element after pop: "<<s.top()<<endl;
cout<<"size of stack: "<<s.size()<<endl;
cout<<"empty or not: "<<s.empty()<<endl;

cout<<"<----------------QUEUE-------------------->"<<endl;
         // Queue (FIFO = first in first out) //

queue<string> q;

q.push("the");
q.push("shubham");
q.push("soni");

cout<<"size before pop: "<<q.size()<<endl;
cout<<"first element: "<<q.front()<<endl;
q.pop();
cout<<"first element after pop: "<<q.front()<<endl;

cout<<"size after pop: "<<q.size()<<endl;

cout<<"<---------------PRIORITY QUEUE------------->"<<endl;
       // Priority Queue (max heap = max no. first) , // 
       // (min heap = min no. first) , by default max heap //
       // O(n), O(1) //
       
priority_queue<int> maxi;
priority_queue<int,vector<int> , greater<int>> mini;

maxi.push(2);
maxi.push(9);
maxi.push(0);
maxi.push(3);
cout<<"size of maxi pririty queue: "<<maxi.size()<<endl;

int size=maxi.size();
cout<<"elements of maxi priority queue: ";
for(int i=0;i<size;i++)
{
    cout<<maxi.top()<<" ";
    maxi.pop();
}cout<<endl;

mini.push(8);
mini.push(4);
mini.push(66);
mini.push(5);
cout<<"size of mini prroty queue: "<<mini.size()<<endl;

int sizeMini=mini.size();
cout<<"elements of mini priority queue: ";
for(int i=0;i<sizeMini;i++)
{
    cout<<mini.top()<<" ";
    mini.pop();
}cout<<endl;

cout<<"empty or not: "<<mini.empty()<<endl; 

cout<<"<------------------SET----------------->"<<endl;
         // Set (Unique element in sorted form) //
         // O(log n), O(1) //
                    
set<int> t;
t.insert(2);
t.insert(5);
t.insert(5);
t.insert(5);
t.insert(99);
cout<<"size of set t: "<<t.size()<<endl;
cout<<"elements of set t (unique and sorted): ";
for(int i:t)
{
    cout<<i<<" ";
}cout<<endl;

set<int>::iterator it=t.begin();
it++;
t.erase(it);
cout<<"erased second element: ";
for(int i:t)
{
    cout<<i<<" ";
}cout<<endl;

cout<<"5 is present or not: "<<t.count(5)<<endl;
cout<<"not present coz we deleted that element! "<<endl;

cout<<"find that 99 is there and print its next element: ";
set<int>::iterator itr=t.find(99);
for(auto it=itr; it!=t.end();it++)
{
    cout<<*it<<" ";
}cout<<endl;
cout<<"find that 2 is there and print its next element: ";
set<int>::iterator ittr=t.find(2);
for(auto it=ittr; it!=t.end();it++)
{
    cout<<*it<<" ";
}cout<<endl;

cout<<"<--------------------MAP---------------->"<<endl;
    // Map (single key will point to single element)  //
    // A -> 1, A !-> 2, A cant point to both numbers //
    // But A -> 1, B ->1 , this is possible // 
    // Sorted form //
    // O(log n) by balance tree for map, //
    // O(1) by hash table for unordered map // 
    
map<int,string> m;

m[1]="the";
m[3]="shubham";
m[2]="great";
m.insert({5,"soni"});

cout<<"size of map m before erase: "<<m.size()<<endl;
cout<<"printing elements of map m: "<<endl;
for(auto i:m)
{
    cout<<i.first<<" "<<i.second<<endl;
}

cout<<"finding 3 is present or not: "<<m.count(3)<<endl;

m.erase(3);
cout<<"after erasing 3: "<<endl;
for(auto i:m)
{
    cout<<i.first<<" "<<i.second<<endl;
}cout<<endl;

auto itrtr=m.find(2);
cout<<"finding 2 and its next elements if any: "<<endl;
for(auto i=itrtr; i!=m.end();i++)
{
    cout<<(*i).first<<" "<<(*i).second<<endl;
}

} 
