                                                    			// Eventual Safe States (GFG), (Leetcode-802), (Codestudio) //
                                                    			// Detect cycle in a directed graph related problem //
                                                    			// DFS Graph Striver //
                                                    			// Create 3 arrays Visited, PathVisited, check //
                                                    			// agar cycle banri hai to vo nodes safe node nahi hongi //
                                                    			// or agar koi node cycle walo me jari hai vo bhi safe nahu hogi //
                                                    			// uske alawa baki ab safe hongi //
                                                    			// T.C = O(n+2E), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

private:
bool dfs(int node, int vis[], int pathVis[], vector<int> adj[], int check[])
{
    vis[node]=1;
    pathVis[node]=1;
    check[node]=0;
    
    for(auto i: adj[node])
    {
        if(!vis[i])
        {
            if(dfs(i, vis, pathVis, adj, check)==true)
            {
                check[node]=0;
                return true;
            }
        }
        else if(pathVis[i])
        {
            check[node]=0;
            return true;
        }
    }
    
    check[node]=1;
    pathVis[node]=0;
    return false;
}

public:
vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
    // code here
    // DFS
    vector<int> ans;
    
    int vis[V]={0};
    int pathVis[V]={0};
    int check[V]={0};
    
    // components
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            dfs(i, vis, pathVis, adj, check);
        }
    }
    
    for(int i=0;i<V;i++)
    {
        if(check[i]==1)
        {
            ans.push_back(i);
        }
    }
    
    return ans;
}
