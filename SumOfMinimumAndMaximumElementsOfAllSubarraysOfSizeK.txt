	// Sum Of Minimum And Maximum Elements Of All Subarrays Of Size K (GFG Article), Codestudio //
	// arr={2,5,-1,7,-3,-1,-2}, k=4 => 18 ([2,5,-1,7], [5,-1,7,-3], [-1,7,-3,-1], [7,-3,-1,-2])  //
	// [7+(-1)], [7+(-3)], [7+(-3)], [7+(-3)] => 6+4+4+4 => 18 (ANS) //
	// T.C = O(n), S.C = O(k) //

#include <bits/stdc++.h>
using namespace std;
    
int solve(int *arr, int n, int k)
{
    deque<int> maxi;
    deque<int> mini;
    
    // addition of first k size window
    
    for(int i=0;i<k;i++)
    {
        while(!maxi.empty() && arr[maxi.back()]<=arr[i])
        {
            maxi.pop_back();
        }
        while(!mini.empty() && arr[mini.back()]>=arr[i])
        {
            mini.pop_back();
        }
        
        maxi.push_back(i);
        mini.push_back(i);
    }
    
    int ans=0;
    for(int i=k;i<n;i++)
    {
        ans += arr[maxi.front()] + arr[mini.front()];
        
        // next window
        
        // removal
        while(!maxi.empty() && i-maxi.front()>=k)
        {
            maxi.pop_front();
        }
        while(!mini.empty() && i-mini.front()>=k)
        {
            mini.pop_front();
        }
        
        // addition
        while(!maxi.empty() && arr[maxi.back()]<=arr[i])
        {
            maxi.pop_back();
        }
        while(!mini.empty() && arr[mini.back()]>=arr[i])
        {
            mini.pop_back();
        }
        
        maxi.push_back(i);
        mini.push_back(i);
    }
    
    // make sure to consider last window
    ans += arr[maxi.front()] + arr[mini.front()];
    return ans;
}

int main()
{
    int arr[7]={2,5,-1,7,-3,-1,-2};
    int k=4;
    
    cout<<solve(arr,7,k)<<endl;
}