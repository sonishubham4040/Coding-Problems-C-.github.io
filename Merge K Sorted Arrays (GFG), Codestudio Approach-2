                                                  // Merge K Sorted Arrays (GFG), Codestudio //
                                                  // Approach-2 Using Min. Heap //
                                                  // arr[][] = {{1,2,3},{4,5,6},{7,8,9}} => 1 2 3 4 5 6 7 8 9 //
                                                  // arr[][] = {{1,2,3,4},{2,2,3,4},{5,5,6,6},{7,8,9,9}} => 1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9 //
                                                  // T.C = O(n*k log(k)), S.C = O(n*k) //

#include <bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    int i;
    int j;
    
    node(int data, int row, int col)
    {
        this->data=data;
        i=row;
        j=col;
    }
};

class compare
{
    public:
    bool operator()(node*a, node*b)
    {
        return a->data > b->data;
    }
};

//Function to merge k sorted arrays.
vector<int> mergeKArrays(vector<vector<int>> arr, int K)
{
    //code here Using Min Heap
    priority_queue<node*, vector<node*>, compare> pq;
    
    // step-1 sare arrays ke first elements insert karo
    for(int i=0;i<K;i++)
    {
        node* temp=new node(arr[i][0], i, 0);
        pq.push(temp);
    }
    
    vector<int> ans;
    
    // step-2: ans me dalo or next element bhi dalo
    while(!pq.empty())
    {
        node* temp=pq.top();
        ans.push_back(temp->data);
        pq.pop();
        
        int i=temp->i;
        int j=temp->j;
        
        if(j+1 < arr[i].size())
        {
            node* next=new node(arr[i][j+1], i, j+1);
            pq.push(next);
        }
    }
    
    return ans;
}
