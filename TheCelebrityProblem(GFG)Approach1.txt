            		// The Celebrity Problem (GFG) //
            		// Everyone knows celebrity and celebrity knows Noone //
            		// Approach-1 Using Stacks //
			// T.C = O(n), S.C = O(n) //

bool knows(vector<vector<int> >& M, int a, int b, int n)
{
    if(M[a][b]==1)
        return true;
    else
        return false;
}
    
//Function to find if there is a celebrity in the party or not.
int celebrity(vector<vector<int> >& M, int n) 
{
    // code here 
    stack<int> s;
        
    // Step-1 Push all element in stack
    for(int i=0;i<n;i++)
    {
        s.push(i);
    }
        
    // Step-2 Get two elements and compare
    while(s.size()>1)
    {
        int a=s.top();
        s.pop();
            
        int b=s.top();
        s.pop();
            
        if(knows(M,a,b,n))
        {
            s.push(b);
        }
        else
        {
            s.push(a);
        }
    }
    int ans=s.top();
        
    // Step-3 Single element in stack is potential celebrity
    // So verify it
    // row check
    bool rowCheck=false;
    int zeroCount=0;
        
    for(int i=0;i<n;i++)
    {
        if(M[ans][i]==0)
        {
            zeroCount++;
        }
    }
    // all zeroes
    if(zeroCount==n)
    {
        rowCheck=true;
    }
        
    // col check
    bool colCheck=false;
    int oneCount=0;
        
    for(int i=0;i<n;i++)
    {
        if(M[i][ans]==1)
        {
            oneCount++;
        }
    }
    // all one except diagnol
    if(oneCount==n-1)
    {
        colCheck=true;
    }
        
    if(rowCheck==true && colCheck==true)
    {
        return ans;
    }
    else
    {
        return -1;
    }
}