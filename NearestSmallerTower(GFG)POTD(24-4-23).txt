			// Nearest Smaller Tower (GFG) POTD (24-4-23) //
			// If two smaller towers are at the same distance, pick the smallest tower //
			// If two towers have the same height then we choose the one with a smaller index //
			// arr[] = {1,3,2} => Output: {-1,0,0} //
			// arr[] = {4,8,3,5,3} => Output: {2,2,-1,2,-1} //
			// T.C = O(n), S.C = O(n), Using Stack //

#include <bits/stdc++.h>
using namespace std;

vector<int> nextSmallerElement(vector<int> &arr, int n)
{
    stack<int> st;
    st.push(-1);
        
    vector<int> ans(n);
        
    for(int i=n-1;i>=0;i--)
    {
        int curr=arr[i];
            
        while(st.top()!=-1 && arr[st.top()]>=curr)
        {
            st.pop();
        }
            
        ans[i]=st.top();
        st.push(i);
    }
        
    return ans;
}
    
vector<int> prevSmallerElement(vector<int> &arr, int n)
{
    stack<int> st;
    st.push(-1);
        
    vector<int> ans(n);
        
    for(int i=0;i<n;i++)
    {
        int curr=arr[i];
            
        while(st.top()!=-1 && arr[st.top()]>=curr)
        {
            st.pop();
        }
            
        ans[i]=st.top();
        st.push(i);
    }
        
    return ans;
}

vector<int> nearestSmallerTower(vector<int> arr)
{
    // code here
    int n=arr.size();
    
    vector<int> ans(n);
    
    vector<int> next(n);
    vector<int> prev(n);
        
    next=nextSmallerElement(arr,n);
    prev=prevSmallerElement(arr,n);
    
    for(int i=0;i<n;i++)
    {
        if(next[i]==-1 && prev[i]==-1)
        {
            ans[i]=-1;
        }
        else if(prev[i]==-1)
        {
            ans[i]=next[i];
        }
        else if(next[i]==-1)
        {
            ans[i]=prev[i];
        }
        else if(i-prev[i] < next[i]-i)
        {
            ans[i]=prev[i];
        }
        else if(i-prev[i] > next[i]-i)
        {
            ans[i]=next[i];
        }
        else if(arr[next[i]] < arr[prev[i]])
        {
            ans[i]=next[i];
        }
        else
        {
            ans[i]=prev[i];
        }
    }
    
    return ans;
}
