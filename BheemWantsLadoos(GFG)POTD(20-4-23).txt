			// Bheem Wants Ladoos (GFG) POTD (20-4-23) //
			// Same As Burning Tree //
			// Find maximum ladoos he can eat if he can go to houses within a maximum distance k from his house. The number of ladoos at his home should also be included in the sum //
/*
                    1
                 /    \
                2      9
               /      /  \
              4      5    7
            /   \        /  \
           8     19    20    11
          /     /  \
         30   40   50
*/
			// home = 9, K = 1 => 22 (9+5+7+1) //
			// home = 40, K = 2 => 113 (40+19+4+50) //
			// T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

Node* createParentMapping(Node* root, int home, map<Node*,Node*> &nodeToParent)
{
    Node* res=NULL;
        
    queue<Node*> q;
    q.push(root);
    nodeToParent[root]=NULL;
        
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
            
        if(temp->data==home)
        {
            res=temp;
        }
            
        if(temp->left)
        {
            nodeToParent[temp->left]=temp;
            q.push(temp->left);
        }
            
        if(temp->right)
        {
            nodeToParent[temp->right]=temp;
            q.push(temp->right);
        }
    }
        
    return res;
}
    
int bheem(Node* root, map<Node*,Node*> &nodeToParent, int k)
{
    map<Node*,bool> visited;
        
    queue<Node*> q;
    q.push(root);
        
    visited[root]=true;
        
    int dis=0;
    int ans=0;
        
    while(!q.empty())
    {
        bool flag=0;
        int size=q.size();
            
        for(int i=0;i<size;i++)
        {
            Node* temp=q.front();
            q.pop();
            
            ans+=temp->data;
                
            if(temp->left && !visited[temp->left])
            {
                flag=1;
                q.push(temp->left);
                visited[temp->left]=true;
            }
                
            if(temp->right && !visited[temp->right])
            {
                flag=1;
                q.push(temp->right);
                visited[temp->right]=true;
            }
                
            if(nodeToParent[temp] && !visited[nodeToParent[temp]])
            {
                flag=1;
                q.push(nodeToParent[temp]);
                visited[nodeToParent[temp]]=true;
            }
        }
            
        dis++;
        if(dis>k)
        {
            break;
        }
    }
        
    return ans;
}
    
int ladoos(Node* root, int home, int k)
{
    // Your code goes here // Similar to burning tree
        
    map<Node*,Node*> nodeToParent;
        
    Node* targetNode=createParentMapping(root, home, nodeToParent);
        
    int ans=bheem(targetNode, nodeToParent, k);
        
    return ans;
    
}
