			// Merge K Sorted Lists (Leetcode-23), GFG, Codestudio //
			// Using Min Heap, priority queue //
			// Sort Linked List In One LL //
			// lists = [[1,4,5],[1,3,4],[2,6]] => [1,1,2,3,4,4,5,6] //
			// T.C = O(n*k log(k)), S.C = O(k) //

#include <bits/stdc++.h>
using namespace std;

class compare
{
    public:
    bool operator()(ListNode*a, ListNode*b)
    {
        return a->val > b->val;    
    }
};

ListNode* mergeKLists(vector<ListNode*>& lists) 
{
    priority_queue<ListNode*, vector<ListNode*>, compare> pq;

    int k=lists.size();

    if(k==0)
    {
        return NULL;
    }

    // step-1: 
    for(int i=0;i<k;i++)
    {
        if(lists[i]!=NULL)
        {
            pq.push(lists[i]);
        }
    }

    ListNode* head=NULL;
    ListNode* tail=NULL;

    while(!pq.empty())
    {
        ListNode* top=pq.top();
        pq.pop();

        if(top->next!=NULL)
        {
            pq.push(top->next);
        }

        if(head==NULL)
        {
            // ans LL is empty
            head=tail=top;
        }
        else
        {
            // insert in LL
            tail->next=top;
            tail=top;
        }
    }

    return head;
}