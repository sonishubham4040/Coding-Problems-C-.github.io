		// Valid Parentheses Codestudio, Leetcode(Q-20), GFG //
		// [()]{}{[()()]()} = Valid, [(]) = Invalid //

#include<bits/stdc++.h>
using namespace std;

bool isValidParenthesis(string expression)
{
    stack<char> s;

    for(int i=0;i<expression.size();i++)
    {
        char ch=expression[i];

        // if opening bracket, stack push
        // if closing backet, stacktop check and pop

        if(ch=='(' || ch=='{' || ch=='[')
        {
            s.push(ch);
        }
        else
        {
            // for closing bracket
            if(!s.empty()) 
            {
              char top = s.top();

              if((ch == ')' && top == '(') || 
                (ch == '}' && top=='{') ||
                (ch==']' && top=='['))
                {
                    s.pop();
                }
                else
                {
                    return false;
                }

            } 
            else 
            {
                return false;
            }
        }
    }

    // Stack is empty then its valid
    if(s.empty())
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main()
{
    string expression="[(])";
    
    if(isValidParenthesis(expression))
    {
        cout<<"Valid"<<endl;
    }
    else
    {
        cout<<"Invalid"<<endl;
    }
}