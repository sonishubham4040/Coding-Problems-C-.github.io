                  			// Find the Minimum and Maximum Number of Nodes Between Critical Points (Leetcode-2058) //
                  			// Josh Technology Question //
                  			// Given in linked list, local minima is that which is smaller than previous and next node // 
                  			// local maxima is greater than both previous and next node //
                  			// return min distance and max distance, between any maxima/minima //
                  			// head = [5,3,1,2,5,1,2] => [1,3] (at index 3, 5, 6 => min dis = 6-5=1, max dis = 6-3=3 => {1,3}) //
                  			// head = [1,3,2,2,3,2,2,2,7] => [3,3] //
                  			// T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

vector<int> nodesBetweenCriticalPoints(ListNode* head) 
{
    vector<int> ans(2, -1);

    ListNode* temp=head;
    int cnt=0;

    while(temp!=NULL)
    {
        temp=temp->next;
        cnt++;
    }

    if(cnt<2)
    {
        return ans;
    }

    ListNode* prev=head;
    ListNode* curr=head->next;
    ListNode* forward=head->next->next;

    vector<int> store;
    int index=1;

    while(forward!=NULL)
    {
        if((curr->val < prev->val) && (curr->val < forward->val))
        {
            store.push_back(index);
        }
        else if((curr->val > prev->val) && (curr->val > forward->val))
        {
            store.push_back(index);
        }

        index++;
        prev=prev->next;
        curr=curr->next;
        forward=forward->next;
    }

    if(store.size()<2)
    {
        return ans;
    }

    // sort(store.begin(), store.end());

    int maxi=INT_MIN;
    int mini=INT_MAX;

    for(int i=0;i<store.size()-1;i++)
    {
        mini=min(mini, abs(store[i]-store[i+1]));
    }

    maxi=store[store.size()-1] - store[0];
    
    ans[0]=mini;
    ans[1]=maxi;

    return ans;    
}
