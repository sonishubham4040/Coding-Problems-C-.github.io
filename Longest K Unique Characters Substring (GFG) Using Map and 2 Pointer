                                          // Longest K Unique Characters Substring (GFG) //
                                          // Using Map and Two Pointer //
                                          // S = "aabacbebebe", K=3 => 7 ("cbebebe" is the longest) //
                                          // S = "aaaa", K=2 => -1 (no substring with K distinct characters) //
                                          // T.C = O(n), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

int longestKSubstr(string s, int k) 
{
    unordered_map<char, int> mp;
    
    int i=0;
    int j=0;
    int ans=-1;
    
    for(i=0;i<s.size();i++)
    {
        if(mp.size()==k)
        {
            if(mp.find(s[i])==mp.end())
            {
                while(mp.size()==k)
                {
                    mp[s[j]]--;
                    if(mp[s[j]]==0)
                    {
                        mp.erase(s[j]);
                    }
                    
                    j++;
                }
            }
            
            ans=max(ans, i-j+1);
        }
        
        mp[s[i]]++;
    }
    
    if(mp.size()==k)
    {
        ans=max(ans, i-j);
    }
    
    return ans;
}
