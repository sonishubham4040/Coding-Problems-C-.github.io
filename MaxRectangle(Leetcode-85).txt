			// Max Rectangle (Leetcode-85) //
			// matrix M => [0,1,1,0] //  
           		 	    // [1,1,1,1] //
            			    // [1,1,1,1] //
            			    // [1,1,0,0] //
			// Output Answer: 8 //            
			// T.C = O(n x m), S.C = O(m) //

vector<int> nextSmallerElement(vector<int> arr, int n)
{
    stack<int> s;

    s.push(-1);

    vector<int> ans(n);

    for(int i=n-1;i>=0;i--) 
    {
        int curr=arr[i];

        while(s.top()!=-1 && arr[s.top()]>=curr) 
        {
            s.pop();
        }

        // answer is stack ka top
        ans[i]=s.top();
        s.push (i);
    }

    return ans;
}

vector<int> prevSmallerElement(vector<int>arr, int n)
{
    stack<int> s;

    s.push(-1) ;

    vector<int> ans(n) ;

    for(int i=0;i<n;i++) 
    {
        int curr=arr[i];

        while(s.top()!=-1 && arr[s.top()]>=curr) 
        {
            s.pop();
        }

        // answer is stack ka top
        ans[i]=s.top();
        s.push (i);
    }

    return ans;
}

int largestRectangleArea(vector<int> heights)
{
    int n=heights.size();

    vector<int> next(n);
    next=nextSmallerElement(heights, n);

    vector<int> prev(n);
    prev=prevSmallerElement(heights, n);
    
    int area=INT_MIN;

    for(int i=0;i<n;i++)
    {
        int l = heights[i];

        if(next[i]==-1)
        {
            next[i]=n;
        }
            
        int b = next[i]-prev[i]-1;
        int newArea=l*b;
        
        area=max(area, newArea);
    }
    return area;
}

int maximalRectangle(vector<vector<char>>& matrix) 
{
    vector<vector<int>> v(matrix.size());

    for(int i=0;i<matrix.size();i++)
    {
        for(int j=0;j<matrix[i].size();j++)
        {
            if(matrix[i][j]=='0')
            {
                v[i].push_back(0);
            }
            else
            {
                v[i].push_back(1);
            } 
        }
    }
    // compute area for first row
    int area=largestRectangleArea(v[0]);
        
    for(int i=1;i<v.size();i++)
    {
        for(int j=0;j<v[i].size();j++)
        {
            // row update by adding previous row's value
            if(v[i][j]!=0)
            {
                v[i][j]+=v[i-1][j];
            }
            else
            {
                v[i][j]=0;
            }
        }
        // entire row is updated
        area=max(area, largestRectangleArea(v[i]));
    }
     return area;
}