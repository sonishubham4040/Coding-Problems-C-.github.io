                                                			// Detect Cycle In A Directed Graph (GFG), (Codestudio) //
                                                			// Course Schedule (Leetcode-207) //
                                                			// DFS Graph Striver //
                                                			// Create two arrays Visited and PathVisited //
                                                			// If both vis and pathVis then only cycle otherwise not //
                                                			// T.C = O(n+2E), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

private:
bool dfs(int node, int vis[], int pathVis[], vector<int> adj[])
{
    vis[node]=1;
    pathVis[node]=1;
    
    for(auto i: adj[node])
    {
        // if node not visited
        if(!vis[i])
        {
            if(dfs(i, vis, pathVis, adj)==true)
            {
                return true;
            }
        }
        // if node is visited, and has to be path visited also
        else if(pathVis[i])
        {
            return true;
        }
    }
    
    pathVis[node]=0;
    return false;
}

public:
bool isCyclic(int V, vector<int> adj[])
{
    // code here
    // DFS
    int vis[V]={0};
    int pathVis[V]={0};
    
    // components
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            if(dfs(i, vis, pathVis, adj)==true)
            {
                return true;
            }
        }
    }
    
    return false;
}
