                                  // Maximum Diamonds (GFG) POTD (14-6-23) //
                                  // If you drop a bag with A[i] diamonds, it changes to A[i]/2 diamonds and you gain A[i] diamonds. 
                                  // Dropping a bag takes 1 minute. Find the maximum number of diamonds that you can take if you are given K minutes //
                                  // N=5, K=3, A[] = {2, 1, 7, 4, 2} => 14 //
                                  // (take (7) and half it-> 2 1 3 4 2 
                                  //  take (4) and half it -> 2 1 3 2 2 
                                  //  take (3) and half it -> 2 1 1 2 2 
                                  // => total K takes done, add them => 7+4+3 = 14) //
                                  // N=3, K=2, A[] = {7, 1, 2} => 10 //
                                  // T.C = O(nlogn), S.C = O(n) //

#include <bits/stdc++.h>
using namespace std;

long long maxDiamonds(int A[], int N, int K) 
{
    priority_queue<int> pq;
    
    for(int i=0;i<N;i++)
    {
        pq.push(A[i]);
    }
    
    long long sum=0;
    int updated;
    
    while(K--)
    {
        int top=pq.top();
        sum+=top;
        updated=top; // value save rakhlo pop se pehle
        
        pq.pop();
        
        pq.push(updated/2); // value/2 daldo wapas
    }
    
    return sum;
}
