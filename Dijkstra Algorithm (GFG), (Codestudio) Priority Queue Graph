                                          			// Implementing Dijkstra Algorithm (GFG), (Codestudio) Dijkstra shortest path //
                                          			// Not for negative weight edges //
                                          			// Using Priority Queue Min-Heap Graph Striver //
                                          			// T.C = O(ElogV), S.C = O(V) //

                                                // GFG Code //
#include <bits/stdc++.h>
using namespace std;

vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    // Code here
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    
    vector<int> dist(V, 1e9);
    
    dist[S]=0;
    // distance, node
    pq.push({0, S});
    
    while(!pq.empty())
    {
        int distance=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        
        for(auto i: adj[node])
        {
            int adjNode=i[0];
            int edgeWeight=i[1];
            
            if(distance+edgeWeight < dist[adjNode])
            {
                dist[adjNode]=distance+edgeWeight;
                pq.push({dist[adjNode], adjNode});
            }
        }
    }
    
    return dist;
}


                                                                                          // Codestudio Code //
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source)
{
    // Write your code here.
    // Dijkstra Algo using Priority Queue Min-Heap
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

    vector<int> dist(vertices, INT_MAX);

    dist[source]=0;
    // distance, node
    pq.push({0, source});

    // adjacency list
    vector<pair<int,int>> adj[vertices];

    for(auto i: vec)
    {
        int u=i[0];
        int v=i[1];
        int wt=i[2];

        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }

    while(!pq.empty())
    {
        int distance=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        
        for(auto i: adj[node])
        {
            int edgeWeight=i.second;
            int adjNode=i.first;

            if(distance+edgeWeight < dist[adjNode])
            {
                dist[adjNode]=distance+edgeWeight;
                pq.push({dist[adjNode], adjNode});
            }
        }
    }

    return dist;
}
