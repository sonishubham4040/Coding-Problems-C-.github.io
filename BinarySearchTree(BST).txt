			// Binary Search Tree (BST) //
			// Insert A Node In BST And Print Tree //
			// Delete a Node In BST //
			// Max and Min Value in BST //
			// Pred and Succ used in Deletion //
			// T.C = O(logN), O(H), O(N), S.C = O(N), O(1) //

#include <bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    node* left;
    node* right;
    
    node(int d)
    {
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};

void levelOrderTraversal(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty())
    {
        node* temp=q.front();
        q.pop();
        
        if(temp==NULL)
        {
            // purana level complete traverse hogya
            cout<<endl;
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            cout<<temp->data<<" ";
            
            if(temp->left)
            {
                q.push(temp->left);
            }
            
            if(temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}

void inOrder(node* root)
{
    // base case
    if(root==NULL)
    {
        return ;
    }
    
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}

void preOrder(node* root)
{
    // base case
    if(root==NULL)
    {
        return ;
    }
    
    cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}

void postOrder(node* root)
{
    // base case
    if(root==NULL)
    {
        return ;
    }
    
    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";
}

node* minValue(node* root)
{
    node* temp=root;
    
    while(temp->left)
    {
        temp=temp->left;
    }
    return temp;
}

node* maxValue(node* root)
{
    node* temp=root;
    
    while(temp->right)
    {
        temp=temp->right;
    }
    return temp;
}

node* deleteFromBST(node* root, int val)
{
    // base case
    if(root==NULL)
    {
        return root;
    }
    
    if(root->data==val)
    {
        // 0 child
        if(root->left==NULL && root->right==NULL)
        {
            delete root;
            return NULL;
        }
        
        // 1 child
        
        // left child
        if(root->left!=NULL && root->right==NULL)
        {
            node* temp=root->left;
            delete root;
            return temp;
        }
        
        // right child
        if(root->left==NULL && root->right!=NULL)
        {
            node* temp=root->right;
            delete root;
            return temp;
        }
        
        // 2 child
        if(root->left!=NULL && root->right!=NULL)
        {
            int mini=minValue(root->right)->data;
            root->data=mini;
            root->right=deleteFromBST(root->right, mini);
            return root;
        }
        
    }
    else if(root->data > val)
    {
        // left part me jao
        root->left=deleteFromBST(root->left, val);
        return root;
    }
    else
    {
        // right part me jao
        root->right=deleteFromBST(root->right, val);
        return root;
    }
}

node* insertIntoBST(node* root, int d)
{
    // base case
    if(root==NULL)
    {
        root=new node(d);
        return root;
    }
    
    if(d > root->data)
    {
        // right part me insert kardo
        root->right=insertIntoBST(root->right, d);
    }
    else
    {
        // left part me insert kardo
        root->left=insertIntoBST(root->left, d);
    }
    
    return root;
}

void takeInput(node* &root)
{
    int data;
    cin>>data;
    
    while(data!=-1)
    {
        root=insertIntoBST(root,data);
        cin>>data;
    }
}

int main()
{
    node* root=NULL;
    // 10 8 21 7 27 5 4 3 -1
    // 100 50 110 25 70 120 60 115 -1
    // 50 20 70 10 30 90 110 -1
    cout<<"Enter data to create BST: "<<endl;
    takeInput(root);
    
    cout<<"Printing Level Order BST: "<<endl;
    levelOrderTraversal(root);
    
    cout<<"Printing inOrder: "<<endl;
    inOrder(root);
    
    cout<<endl<<"Printing preOrder: "<<endl;
    preOrder(root);
    
    cout<<endl<<"Printing postOrder: "<<endl;
    postOrder(root);
    
    cout<<endl<<"Min. value in BST: "<<minValue(root)->data<<endl;
    
    cout<<"Max. value in BST: "<<maxValue(root)->data<<endl;
    
    // DELETION Of NODE
    int val=50;
    
    root=deleteFromBST(root, val);
    
    cout<<endl<<"After Deleting Node-> "<<val<<" :"<<endl;
    
    cout<<"Printing Level Order BST: "<<endl;
    levelOrderTraversal(root);
    
    cout<<"Printing inOrder: "<<endl;
    inOrder(root);
    
    cout<<endl<<"Printing preOrder: "<<endl;
    preOrder(root);
    
    cout<<endl<<"Printing postOrder: "<<endl;
    postOrder(root);
    
    cout<<endl<<"Min. value in BST: "<<minValue(root)->data<<endl;
    
    cout<<"Max. value in BST: "<<maxValue(root)->data<<endl;
    
}