	        	// LCA Of Two Nodes In A BST (Codestudio), Leetcode-235 //
	        	// Lowest Common Ancestor in a BST (GFG) //
	        	// Approach-1, Recursive, Approach-2: Iterative //
			// T.C = O(n), S.C = O(n) height of tree // 

#include <bits/stdc++.h>
using namespace std;

// Approach-1: Recursive
Node* LCA(Node *root, int n1, int n2)
{
   //Your code here
   if(root==NULL)
   {
       return NULL;
   }
   
   if(root->data < n1 && root->data < n2)
   {
       return LCA(root->right, n1, n2);
   }
   
   if(root->data > n1 && root->data > n2)
   {
       return LCA(root->left, n1, n2);
   }
   
   return root;
}

// Approach-2: Iterative
Node* LCA(Node *root, int n1, int n2)
{
   //Your code here
   while(root!=NULL)
   {
        if(root->data < n1 && root->data < n2)
        {
            root=root->right;
        }
        else if(root->data > n1 && root->data > n2)
        {
            root=root->left;
        }
        else
        {
            return root;
        }
    }
}