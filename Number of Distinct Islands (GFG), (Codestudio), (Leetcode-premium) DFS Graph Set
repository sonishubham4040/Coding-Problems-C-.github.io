                                        			// Number of Distinct Islands (GFG), (Codestudio), (Leetcode-premium) //
                                        			// DFS Graph Striver Using Set //
                                        			// Distinct islands: unique islands - One island is not equal to other as not rotated / reflected //
                                        /*
                                        {{1, 1, 0, 0, 0},
                                        {1, 1, 0, 0, 0},        => 1 (single island as both are same)
                                        {0, 0, 0, 1, 1},
                                        {0, 0, 0, 1, 1}}
                                        */
                                        
                                        /*
                                        {{1, 1, 0, 1, 1},
                                        {1, 0, 0, 0, 0},        => 3 (right top-left bottom same, )
                                        {0, 0, 0, 0, 1},                (left top-right bottom diff.)
                                        {1, 1, 0, 1, 1}}
                                        */
                                        
                                        /*
                                        {{1, 1, 0, 1, 1},
                                        {1, 0, 0, 0, 0},        => 2 (both top-left are same )
                                        {0, 0, 0, 1, 1},             (of 2 islands.)
                                        {1, 1, 0, 1, 0}}
                                        */
                                        
                                        			// T.C = O(n*m), S.C = O(n*m) // 

#include <bits/stdc++.h>
using namespace std;

private:
void dfs(int row, int col, vector<vector<int>> &vis, 
    vector<vector<int>>& grid, vector<pair<int,int>> &v,
    int row0, int col0, int n, int m)
{
    vis[row][col]=1;
    
    v.push_back({row-row0, col-col0});
    
    int delrow[]={-1, 0, +1, 0};
    int delcol[]={0, +1, 0, -1};
    
    for(int i=0;i<4;i++)
    {
        int nrow=row+delrow[i];
        int ncol=col+delcol[i];
        
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol]
                && grid[nrow][ncol]==1)
        {
            dfs(nrow, ncol, vis, grid, v, row0, col0, n, m);
        }    
    }
}    

public:
int countDistinctIslands(vector<vector<int>>& grid) 
{
    // code here
    // DFS
    int n=grid.size();
    int m=grid[0].size();
    
    vector<vector<int>> vis(n, vector<int>(m, 0));
    set<vector<pair<int,int>>> st;
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(!vis[i][j] && grid[i][j]==1)
            {
                vector<pair<int,int>> v;
                
                dfs(i, j, vis, grid, v, i, j, n, m);
                st.insert(v);
            }
        }
    }
    
    return st.size();
}
