			// Binary Tree Level Order Traversal (Leetcode-102) //
			// Input: root = [3,9,20,null,null,15,7] //
			// Output: [[3],[9,20],[15,7]] //
			// Input: root = [1] //
			// Output: [[1]] //

#include<bits/stdc++.h>
using namespace std;

/*
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
*/

vector<vector<int>> levelOrder(TreeNode* root) 
{
    vector<vector<int>> ans;
    vector<int> output;

    if(root==NULL)
    {
        return ans;
    }

    queue<TreeNode*> q;
    q.push(root);
    q.push(NULL); // seperator of level
    
    while(!q.empty())
    {
        TreeNode* temp=q.front();
        q.pop();
        
        if(temp==NULL) // purana level complete traversed
        {
            ans.push_back(output); // store 1d vector elements into 2d ans 
            output.clear();

            if(!q.empty()) // queue still has some child nodes
            {
                q.push(NULL);
            }
        }
        else
        {
            output.push_back(temp->val); // insert element into 1d vector
            
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
        }
    }
    return ans;
}