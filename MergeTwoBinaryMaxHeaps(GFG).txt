			// Merge Two Binary Max Heaps (GFG) //
			// Using Heapify //
			// step-1: merge both arrays, step-2: Build heap (heapify) //
			// T.C = O(m+n), S.C = O() //

#include <bits/stdc++.h>
using namespace std;

void heapify(vector<int> &arr, int n, int i)
{
    // 0 based indexing
    int largest=i;
    int left=2*i+1;
    int right=2*i+2;
    
    if(left<n && arr[largest]<arr[left])
    {
        largest=left;
    }
    
    if(right<n && arr[largest]<arr[right])
    {
        largest=right;
    }
    
    if(largest!=i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
    
}

vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m)
{
    // your code here
    
    // step-1: merge both arrays into one
    vector<int> ans;
    
    for(auto i:a)
    {
        ans.push_back(i);
    }
    
    for(auto i:b)
    {
        ans.push_back(i);
    }
    
    int size=ans.size();
    
    // step-2: Build heap, heapify kardo
    for(int i=size/2;i>=0;i--)
    {
        heapify(ans, size, i);
    }
    
    return ans;
}