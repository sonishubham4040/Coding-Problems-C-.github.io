                                    // K-th Largest Sum Contiguous Subarray (GFG), Codestudio //
                                    // K=2, Arr = {3,2,1} => 5 ({6,5,3,2,1}) //
                                    // K=3, Arr = {2,6,4,1} => 11 ({13,12,11,10,8,6,5,4,2,1}) //
                                    // Approach-2 Using Min Heap //
                                    // T.C = O(n*nlogk), S.C = O(k) //

#include <bits/stdc++.h>
using namespace std;
	
int getKthLargest(vector<int> &arr, int k)
{
	priority_queue<int, vector<int>, greater<int>> pq;
	int n=arr.size();
	
	for(int i=0;i<n;i++)
	{
		int sum=0;
		
		for(int j=i;j<n;j++)
		{
			sum+=arr[j];
			
			if(pq.size()<k)
			{
				pq.push(sum);
			}
			else
			{
				if(sum>pq.top())
				{
					pq.pop();
					pq.push(sum);
				}
			}
		}
	}
	
	return pq.top();
}
