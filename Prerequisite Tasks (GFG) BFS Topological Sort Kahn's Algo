                                              			// Prerequisite Tasks (GFG), (Codestudio) //
                                              			// BFS - Topological Sort, Kahn's Algorithm //
                                              			// Agar topo me sare N nodes agaye matlb cycle nahi hai or task ho jayenge sare //
                                              			// Agar N se kam hai matlb cycle banri hai or task ni hopayenge //
                                              			// N=4, P=3, prerequisites = {{1,0},{2,1},{3,2}} => YES (0 1 2 3) //
                                              			// N=2, P=2, prerequisites = {{1,0},{0,1}} => NO (forms cycle) //
                                              			// T.C = O(V+2E), S.C = O(V) //

#include <bits/stdc++.h>
using namespace std;

bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) 
{
    // Code here
    // create adjacency list
    vector<int> adj[N];
    
    for(auto i: prerequisites)
    {
        int u=i.first;
        int v=i.second;
        
        adj[v].push_back(u);
    }
    
    // indegree array banao nodes ki
    int indegree[N]={0};
    
    for(int i=0;i<N;i++)
    {
        for(auto j: adj[i])
        {
            indegree[j]++;
        }
    }
    
    // 0 indegree walo ko queue me daldo
    queue<int> q;
    
    for(int i=0;i<N;i++)
    {
        if(indegree[i]==0)
        {
            q.push(i);
        }
    }
    
    vector<int> topo;
    
    while(!q.empty())
    {
        int node=q.front();
        q.pop();
        
        topo.push_back(node);
        
        for(auto i: adj[node])
        {
            indegree[i]--;
            
            if(indegree[i]==0)
            {
                q.push(i);
            }
        }
    }
    
    if(topo.size()==N)
    {
        return true;
    }
    
    return false;
}
