                                              // Is Binary Tree Heap (GFG) //
                                              // Conditions check: isCBT and isMaxOrder //
                                              // T.C = O(n), S.C = O(H) or O(n) //

#include <bits/stdc++.h>
using namespace std;

int countNodes(struct Node* tree)
{
    // base case
    if(tree==NULL)
    {
        return 0;
    }
    
    int ans=1 + countNodes(tree->left) + countNodes(tree->right);
    return ans;
}

bool isCBT(struct Node* tree, int index, int count)
{
    if(tree==NULL)
    {
        return true;
    }
    
    if(index>=count)
    {
        return false;
    }
    else
    {
        bool left=isCBT(tree->left, 2*index+1, count);
        bool right=isCBT(tree->right, 2*index+2, count);
        return (left && right);
    }
}

bool isMaxOrder(struct Node* tree)
{
    // leaf node
    if(tree->left==NULL && tree->right==NULL)
    {
        return true;
    }
    
    // only left node
    if(tree->right==NULL)
    {
        return (tree->data > tree->left->data);
    }
    else
    {
        bool left=isMaxOrder(tree->left);
        bool right=isMaxOrder(tree->right);
        
        return (left && right && 
        (tree->data > tree->left->data && tree->data > tree->right->data));
    }
}

bool isHeap(struct Node* tree)
{
    // code here
    int index=0;
    int totalCount=countNodes(tree);
    
    if(isCBT(tree, index, totalCount) && isMaxOrder(tree))
    {
        return true;
    }
    else
    {
        return false;
    }
}
