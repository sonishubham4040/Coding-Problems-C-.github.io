					// Quick Sort Using Recursion //

#include <bits/stdc++.h>
using namespace std;

int partition(int arr[], int s, int e)
{
    int pivot=arr[s];
    
    int count=0;
    for(int i=s+1;i<=e;i++)
    {
        if(arr[i]<=pivot)
        {
            count++;
        }
    }
    
    // place pivot at right position
    int pivotIndex=s+count;
    swap(arr[pivotIndex], arr[s]);
    
    // left and right part sambhal lete hai
    int i=s,j=e;
    while(i<pivotIndex && j>pivotIndex)
    {
        while(arr[i]<=pivot)
        {
            i++;
        }
        while(arr[j]>pivot)
        {
            j--;
        }
        if(i<pivotIndex && j>pivotIndex)
        {
            swap(arr[i++], arr[j--]);
        }
    }
    return pivotIndex;
}

void quickSort(int arr[], int s, int e)
{
    // base case
    while(s>=e)
    return ;
    
    // partition karo
    int p=partition(arr,s,e);
    
    // left part sort karo
    quickSort(arr,s,p-1);
    
    // right part sort karo
    quickSort(arr,p+1,e);
    
}

int main() 
{
    int arr[]={4,5,7,8,8,11,2,33,6,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    
    cout<<"Quick Sort: "<<endl;
    quickSort(arr,0,n-1);
    for(int i:arr)
    {
        cout<<i<<" ";
    }
}
