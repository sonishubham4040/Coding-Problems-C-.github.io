                                                          			// Implementing Dijkstra Algorithm (GFG) //
                                                          			// Not for negative weight edges //
                                                          			// Using Set Graph Striver //
                                                          			// T.C = O(ElogV), S.C = O(V) //

#include <bits/stdc++.h>
using namespace std;

vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
{
    // Code here
    // Using Set
    set<pair<int,int>> st;
    st.insert({0, S});
    
    vector<int> dist(V, 1e9);
    dist[S]=0;
    
    while(!st.empty())
    {
        auto it= *(st.begin()); // value at starting of set
        
        int distance=it.first;
        int node=it.second;
        st.erase(it);
        
        for(auto i: adj[node])
        {
            int adjNode=i[0];
            int edgeWeight=i[1];
            
            if(distance+edgeWeight < dist[adjNode])
            {
                // erase if it is existed
                if(dist[adjNode]!=1e9)
                {
                    st.erase({dist[adjNode], adjNode});
                }
                
                dist[adjNode]=distance+edgeWeight;
                st.insert({dist[adjNode], adjNode});
            }
        }
    }
    
    return dist;
}
